<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis发布订阅</title>
      <link href="/2022/05/20/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/2022/05/20/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h5 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h5><ol><li>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</li><li>Redis 客户端可以订阅任意数量的频道。</li></ol><h5 id="发布订阅命令"><a href="#发布订阅命令" class="headerlink" title="发布订阅命令"></a>发布订阅命令</h5><h6 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h6><p><em>用于订阅给定的一个或多个频道的信息</em></p><blockquote><p>redis 127.0.0.1:6379&gt; SUBSCRIBE channel [channel …]</p></blockquote><p>返回值：接收到的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe yang</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure><h6 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h6><p><em>用于将信息发送到指定的频道</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUBLISH channel message</p></blockquote><p>返回值：接收到信息的订阅者数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish yang hello  # 发布信息</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h6 id="unsubcribe"><a href="#unsubcribe" class="headerlink" title="unsubcribe"></a>unsubcribe</h6><p><em>用于订阅给定的一个或多个频道的信息</em></p><blockquote><p>redis 127.0.0.1:6379&gt; UNSUBSCRIBE channel [channel …]</p></blockquote><p>返回值：在不同的客户端有不同的表现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; unsubscribe yang</span><br><span class="line">1) &quot;unsubscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 0</span><br></pre></td></tr></table></figure><h6 id="pubsub"><a href="#pubsub" class="headerlink" title="pubsub"></a>pubsub</h6><p><em>用于查看订阅与发布系统状态，它由数个不同规格的子命令组成</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUBSUB <subcommand> [argument [argument …]]</p></blockquote><p>返回值：由活跃频道组成的列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBSUB CHANNELS</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><h6 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h6><p><em>订阅一个或多个符合给定模式的频道</em></p><blockquote><p>每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类。</p></blockquote><blockquote><p>redis 127.0.0.1:6379&gt; PSUBSCRIBE pattern [pattern …]</p></blockquote><p>返回值：接收到的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PSUBSCRIBE mychannel</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;mychannel&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h6 id="punsubscribe"><a href="#punsubscribe" class="headerlink" title="punsubscribe"></a>punsubscribe</h6><p><em>用于退订所有给定模式的频道</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUNSUBSCRIBE [pattern [pattern …]]</p></blockquote><p>返回值：在不同客户端有不同表现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUNSUBSCRIBE mychannel </span><br><span class="line">1) &quot;punsubscribe&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><em>需要开启两个 redis-cli 客户端。</em></p><p><em><strong>创建可订阅频道名为 yang</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 第一个客户端</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; subscribe yang</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第二个客户端</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; publish yang hello  # 发布信息</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis发布订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jedis</title>
      <link href="/2022/05/18/Jedis/"/>
      <url>/2022/05/18/Jedis/</url>
      
        <content type="html"><![CDATA[<h5 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h5><ol><li>jedis就是基于java语言的redis客户端，集成了redis的命令操作，提供了连接池管理。</li><li>redis-cli是redis官方提供的客户端，可以看作一个shell程序，它可以发送命令对redis进行操作。</li><li>对于jedis同理是使用java语言操作redis，双方都遵循redis提供的协议，按照协议开发对应的客户端。</li></ol><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="连接方式对比"><a href="#连接方式对比" class="headerlink" title="连接方式对比"></a>连接方式对比</h5><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直连</td><td>1. 简单方便<br />2. 适用于少量长期连接的场景</td><td>1. 存在每次新建&#x2F;关闭TCP开销<br />2. 资源无法控制，存在连接泄露的可能<br />3. Jedis对象线程不安全</td></tr><tr><td>连接池</td><td>1. Jedis预先生成，降低开销使用<br />2.连接池的形式保护和控制资源的使用</td><td>1. 相对于直连，使用相对于麻烦，<br />尤其在资源的管理上需要很多参数来保证，<br />一旦规划不合理就会出现问题</td></tr></tbody></table><h5 id="Jedis直连"><a href="#Jedis直连" class="headerlink" title="Jedis直连"></a>Jedis直连</h5><p><em>Jedis直连，本质是定义一个TCP连接，然后使用<code>socket</code>技术进行通信</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1.生成一个jedis对象，这个对象负责和指定Redis节点进行通信</span><br><span class="line">Jedis jedis = new Jedis(&quot;127.0.0.1&quot;, 6379);</span><br><span class="line"># 带密码需要执行认证方法</span><br><span class="line"># jedis.auth(&quot;123456&quot;);</span><br><span class="line"># 2.jedis执行set操作</span><br><span class="line">jedis.set(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line"># 3.jedis执行get操作，value=&quot;world&quot;</span><br><span class="line">String value = jedis.get(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><h5 id="Jdeis简单使用"><a href="#Jdeis简单使用" class="headerlink" title="Jdeis简单使用"></a>Jdeis简单使用</h5><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> #  1.string</span><br><span class="line"># 输出结果: OK</span><br><span class="line">jedis.set(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line"># 输出结果: world</span><br><span class="line">jedis.get(&quot;hello&quot;);</span><br><span class="line"># 输出结果:1</span><br><span class="line">jedis.incr(&quot;counter&quot;);</span><br></pre></td></tr></table></figure><h6 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  2.hash</span><br><span class="line">jedis.hset(&quot;myhash&quot;, &quot;f1&quot;, &quot;v1&quot;);</span><br><span class="line">jedis.hset(&quot;myhash&quot;, &quot;f2&quot;, &quot;v2&quot;);</span><br><span class="line"># 输出结果 : &#123;f1=v1, f2=v2&#125;</span><br><span class="line">jedis.hgetAll(&quot;myhash&quot;);</span><br></pre></td></tr></table></figure><h6 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  3.list</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;1&quot;);</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;2&quot;);</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;3&quot;);</span><br><span class="line"># 输出结果 : [1, 2, 3]</span><br><span class="line">jedis.lrange(&quot;mylist&quot;, 0, -1);</span><br></pre></td></tr></table></figure><h6 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  4.set</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;a&quot;);</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;b&quot;);</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;a&quot;);</span><br><span class="line"># 输出结果 : [b, a]</span><br><span class="line">jedis.smembers(&quot;myset&quot;);</span><br></pre></td></tr></table></figure><h6 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  5.zset</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 99, &quot;tom&quot;);</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 66, &quot;peter&quot;);</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 33, &quot;james&quot;);</span><br><span class="line"># 输出结果 : [[[&quot;james&quot;],33.0], [[&quot;peter&quot;],66.0], [[&quot;tom&quot;],99.0]]</span><br><span class="line">jedis.zrangeWithScores(&quot;myzset&quot;, 0, -1);</span><br></pre></td></tr></table></figure><h5 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h5><ol><li>Jedis直连是每次操作创建一个jedis对象，执行完毕后关闭连接，对应的就是一次TCP连接。</li><li>Jedis连接池是预先生成一批Jedis连接对象放入连接池中，当需要对redis进行操作时从连接池中接用jedis对象，操作完后归还，这样jedis对象可以重复使用，避免了频繁创建socket连接，节省了连接的开销。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接池配置对象,包含了很多默认配置</span><br><span class="line">        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();</span><br><span class="line">        //初始化Jedis连接池，通常来讲JedisPool是单例的</span><br><span class="line">        JedisPool jedisPool = new JedisPool(poolConfig, &quot;127.0.0.1&quot;, 6379);</span><br><span class="line">        Jedis jedis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.从连接池获取jedis对象</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            //2.执行操作</span><br><span class="line">            jedis.set(&quot;hello&quot;, &quot;jedis&quot;);</span><br><span class="line">            System.out.println(jedis.get(&quot;hello&quot;));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            //如果使用JedisPool，那么close操作不是关闭连接，代表归还连接池</span><br><span class="line">            if(jedis != null)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jedis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis事务</title>
      <link href="/2022/05/17/Redis%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/05/17/Redis%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h5 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h5><p><em><strong>Redis单条命令保存原子性，但是事务不保证原子性</strong></em></p><ol><li>一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行</li><li>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证<ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul></li><li>一个事务从开始到执行会经历以下三个阶段<ul><li>开始事务</li><li>命令入队</li><li>执行事务</li></ul></li></ol><h5 id="事务执行过程"><a href="#事务执行过程" class="headerlink" title="事务执行过程"></a>事务执行过程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    # 开启事务</span><br><span class="line">OK</span><br><span class="line"># 命令入队</span><br><span class="line">127.0.0.1:6379&gt; set name yang</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k1 peng</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 hh</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec    # 执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;yang&quot;</span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><h5 id="终止事务"><a href="#终止事务" class="headerlink" title="终止事务"></a>终止事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    # 开启事务</span><br><span class="line">OK</span><br><span class="line"># 命令入队</span><br><span class="line">127.0.0.1:6379&gt; set name yang</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k1 peng</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD   # 取消事务</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h5 id="编译型异常-命令有错"><a href="#编译型异常-命令有错" class="headerlink" title="编译型异常(命令有错)"></a>编译型异常(命令有错)</h5><p><em>事务中所有的命令都不会被执行</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k2  # 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec  # 执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1  #未执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="运行时异常-语法错误"><a href="#运行时异常-语法错误" class="headerlink" title="运行时异常(语法错误)"></a>运行时异常(语法错误)</h5><p><em>其他命令可以正常执行，错误命令抛出异常</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1  # 语法错误，字符串不能自增</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v2&quot;</span><br></pre></td></tr></table></figure><h5 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a>watch命令</h5><p><em>用于监视一个或多个key，如果在事务执行之前这个或这些key被其他命令所改动，那么事务将被打断</em></p><blockquote><p>watch key [key …]</p></blockquote><p>返回值：OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h5 id="unwatch命令"><a href="#unwatch命令" class="headerlink" title="unwatch命令"></a>unwatch命令</h5><p><em>用于取消watch命令对所有key的监视</em></p><blockquote><p>unwatach</p></blockquote><p>返回值：OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em><strong>可使用watch实现乐观锁</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(三)</title>
      <link href="/2022/05/17/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%89/"/>
      <url>/2022/05/17/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><ol><li><p>BitMap 原本的含义是用一个比特位来映射某个元素的状态。由于一个比特位只能表示 0 和 1 两种状态，所以 BitMap 能映射的状态有限，但是使用比特位的优势是能大量的节省内存空间。</p></li><li><p>在 Redis 中，可以把 Bitmaps 想象成一个以比特位为单位的数组，数组的每个单元只能存储0和1，数组的下标在 Bitmaps 中叫做偏移量。</p></li></ol><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 设置值，其中value只能是 0 和 1</span><br><span class="line">setbit key offset value</span><br><span class="line"></span><br><span class="line"># 获取值</span><br><span class="line">getbit key offset</span><br><span class="line"></span><br><span class="line"># 获取指定范围内值为 1 的个数</span><br><span class="line"># start 和 end 以字节为单位</span><br><span class="line">bitcount key start end</span><br><span class="line"></span><br><span class="line"># BitMap间的运算</span><br><span class="line"># operations 位移操作符，枚举值</span><br><span class="line">  AND 与运算 &amp;</span><br><span class="line">  OR 或运算 |</span><br><span class="line">  XOR 异或 ^</span><br><span class="line">  NOT 取反 ~</span><br><span class="line"># result 计算的结果，会存储在该key中</span><br><span class="line"># key1 … keyn 参与运算的key，可以有多个，空格分割，not运算只能一个key</span><br><span class="line"># 当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0。返回值是保存到 destkey 的字符串的长度（以字节byte为单位），和输入 key 中最长的字符串长度相等。</span><br><span class="line">bitop [operations] [result] [key1] [keyn…]</span><br><span class="line"></span><br><span class="line"># 返回指定key中第一次出现指定value(0/1)的位置</span><br><span class="line">bitpos [key] [value]</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p><strong>1. 用户签到</strong></p><p>很多网站都提供了签到功能，并且需要展示最近一个月的签到情况，这种情况可以使用 BitMap 来实现。<br>根据日期 offset &#x3D; （今天是一年中的第几天） % （今年的天数），key &#x3D; 年份：用户id。</p><p>如果需要将用户的详细签到信息入库的话，可以考虑使用一个一步线程来完成。</p><p><strong>2. 统计活跃用户（用户登陆情况）</strong></p><p>使用日期作为 key，然后用户 id 为 offset，如果当日活跃过就设置为1。</p><p>假如 20201009 活跃用户情况是： [1，0，1，1，0]<br>20201010 活跃用户情况是 ：[ 1，1，0，1，0 ]</p><p>统计连续两天活跃的用户总数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bitop and dest1 20201009 20201010 </span><br><span class="line"># dest1 中值为1的offset，就是连续两天活跃用户的ID</span><br><span class="line">bitcount dest1</span><br></pre></td></tr></table></figure><p>统计20201009 ~ 20201010 活跃过的用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitop or dest2 20201009 20201010 </span><br></pre></td></tr></table></figure><p><strong>3. 统计用户是否在线</strong></p><p>如果需要提供一个查询当前用户是否在线的接口，也可以考虑使用 BitMap 。即节约空间效率又高，只需要一个 key，然后用户 id 为 offset，如果在线就设置为 1，不在线就设置为 0。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(二)</title>
      <link href="/2022/05/16/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
      <url>/2022/05/16/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h5 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h5><p>Redis3.2版本推出，其可以推算地理位置信息，两地之间的距离，方圆几里的人。</p><h5 id="六大命令"><a href="#六大命令" class="headerlink" title="六大命令"></a>六大命令</h5><h6 id="geoadd添加经纬度"><a href="#geoadd添加经纬度" class="headerlink" title="geoadd添加经纬度"></a>geoadd添加经纬度</h6><blockquote><p>[geoadd key longitude latitude member [longitude latitude member …]]</p></blockquote><ul><li>地理位置两极无法直接输入经纬度，一般通过Java程序批量读取地理位置信息插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 116.405285 39.904989 beijing  108.948024  34.263161  shanxi </span><br><span class="line">(integer) 2</span><br><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 87.617733 43.792818 xinjiang</span><br><span class="line">(integer) 1</span><br><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 115.892151 28.676493 jiangxi</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h6 id="geopos获取经纬度"><a href="#geopos获取经纬度" class="headerlink" title="geopos获取经纬度"></a>geopos获取经纬度</h6><blockquote><p>[geopos key member [member …]]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos chian:city shanxi</span><br><span class="line">1) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">   </span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city shanxi  beijing</span><br><span class="line">1) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">2) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br></pre></td></tr></table></figure><h6 id="geodist距离计算"><a href="#geodist距离计算" class="headerlink" title="geodist距离计算"></a>geodist距离计算</h6><blockquote><p>[geodist key member1 member2 [m|km|ft|mi]]</p></blockquote><ul><li>单位有米,千米,英里,英尺,默认以米作为单位</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi</span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi </span><br><span class="line">&quot;911278.5437&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi m</span><br><span class="line">&quot;911278.5437&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi km</span><br><span class="line">&quot;911.2785&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi  mi</span><br><span class="line">&quot;566.2436&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi  ft</span><br><span class="line">&quot;2989759.0015&quot;</span><br></pre></td></tr></table></figure><h6 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h6><blockquote><p>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key]]</p></blockquote><ul><li>以给定的经纬度为中心，找出某一半径内所有的元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">##查询所有的key</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line"></span><br><span class="line">##获取该Key下的所有元素</span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi shanghai</span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">3) (nil)</span><br><span class="line"></span><br><span class="line">##以116.39这个经纬度为中心,半径1000km查询</span><br><span class="line">##一般以哪个精度为中心,这个精度都是用户自己,</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;shanxi&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带withcoord,查询完成后获得经纬度信息</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  withcoord</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">      2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;shanxi&quot;</span><br><span class="line">   2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">      2) &quot;34.2631604414749944&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带withdist,查询完成后获得直线距离</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  withdist </span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;106.5063&quot;</span><br><span class="line">2) 1) &quot;shanxi&quot;</span><br><span class="line">   2) &quot;820.3684&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带conut参数,指定获取附近的几个</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  count 1</span><br><span class="line">1) &quot;beijing&quot;</span><br></pre></td></tr></table></figure><h6 id="georadiusbymember通过城市查找"><a href="#georadiusbymember通过城市查找" class="headerlink" title="georadiusbymember通过城市查找"></a>georadiusbymember通过城市查找</h6><blockquote><p>[georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key]]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember chian:city beijing 1000 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;shanxi&quot;</span><br></pre></td></tr></table></figure><h6 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h6><blockquote><p>[geohash key member [member …]]</p></blockquote><ul><li>将二维的经纬度转换为一维的字符串，经过hash之后的结果，如果两个字符串越像，则代表越接近</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi shanghai jingxi </span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">4) (nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geohash chian:city beijing shanxi</span><br><span class="line">1) &quot;wx4g0b7xrt0&quot;</span><br><span class="line">2) &quot;wqj6zjmt2u0&quot;</span><br></pre></td></tr></table></figure><h5 id="geospatial的底层基本原理"><a href="#geospatial的底层基本原理" class="headerlink" title="geospatial的底层基本原理"></a>geospatial的底层基本原理</h5><p>geo的底层原理就是zset的封装</p><ol><li><p>查看geo类型的所有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange china 0 -1</span><br></pre></td></tr></table></figure></li><li><p>删除某一项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem china beijing</span><br></pre></td></tr></table></figure></li></ol><p>使用zset的命令依然可以操作geospatial</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(一)</title>
      <link href="/2022/05/15/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%80/"/>
      <url>/2022/05/15/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h5 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h5><p><em>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</em></p><ol><li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p></li><li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></li><li><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ol><h5 id="什么是基数"><a href="#什么是基数" class="headerlink" title="什么是基数"></a>什么是基数</h5><blockquote><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><h6 id="PFADD"><a href="#PFADD" class="headerlink" title="PFADD"></a>PFADD</h6><p>Redis Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中。</p><blockquote><p>redis 127.0.0.1:6379&gt; PFADD key element [element …]</p></blockquote><p><em>返回值：整形，如果至少有个元素被添加返回1，否则返回0key，若已添加过该元素也返回0</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h6 id="PFCOUNT"><a href="#PFCOUNT" class="headerlink" title="PFCOUNT"></a>PFCOUNT</h6><p>Redis Pfcount 命令返回给定 HyperLogLog 的基数估算值。</p><blockquote><p>redis 127.0.0.1:6379&gt; PFCOUNT key [key …]</p></blockquote><p><em>返回值：返回给定ke’y</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h6 id="PFMERGE"><a href="#PFMERGE" class="headerlink" title="PFMERGE"></a>PFMERGE</h6><p>Redis PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的。</p><blockquote><p>PFMERGE destkey sourcekey [sourcekey …]</p></blockquote><p><em>返回值：OK</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; PFADD hll1 foo bar zap a</span><br><span class="line">(integer) 1</span><br><span class="line">redis&gt; PFADD hll2 a b c foo</span><br><span class="line">(integer) 1</span><br><span class="line">redis&gt; PFMERGE hll3 hll1 hll2</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis&gt; PFCOUNT hll3</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>网页的UV</p><p>一个人访问一个网站多次，但还是算作一个人</p><p>有0.81%的错误率，可忽略</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据类型</title>
      <link href="/2022/05/15/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/05/15/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作<br />对整数和浮点数执行自增或者自减操作</td></tr><tr><td>LIST</td><td>列表</td><td>从两端压入或者弹出元素，<br />对单个或者多个元素进行修剪<br />只保留一个范围内的元素</td></tr><tr><td>SET</td><td>无序集合</td><td>添加、获取、移除单个元素，<br />检查一个元素是否存在于集合中<br />计算交集、并集、差集，从集合里面随机获取元素</td></tr><tr><td>HASH</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对<br />获取所有键值对，检查某个键是否存在</td></tr><tr><td>ZSET</td><td>有序集合</td><td>添加、获取、删除元素<br />根据分值范围或者成员来获取元素<br /> 计算一个键的排名</td></tr></tbody></table><h5 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h5><ol><li>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value</li><li>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象</li><li>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value  #设置指定key的值</span><br><span class="line">get key  #获取指定key的值</span><br><span class="line">getrange key start end  #返回key中字符串值的子字符</span><br><span class="line">getset key value #将给定key的值设为value，并返回key的旧值</span><br><span class="line">getbit key offset  #对key所存储的字符串值，获取指定偏移量上的位</span><br><span class="line">mget key1[key2...]  #获取所有（一个或多个）给定key的值</span><br><span class="line">setex key seconds value  #将值value关联到key，并将key的过期时间设为seconds（以秒为单位）</span><br><span class="line"><span class="built_in">strlen</span> key  #返回key所存储的字符串值的长度</span><br><span class="line">incr key  #将key中存储的数字值增一</span><br><span class="line">decr key  #将key中存储的数字值减一</span><br><span class="line">append key value  #如果key已经存在并且是一个字符串，append命令将指定的value追加到key原来值的末尾</span><br></pre></td></tr></table></figure><h5 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h5><ol><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</li><li>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lindex key index  #通过索引获取列表中的元素</span><br><span class="line">llen key  #获取列表长度</span><br><span class="line">linsert key before|after pivot value  #在列表元素前或后插入元素</span><br><span class="line">lpush key value1[value2...]  #将一个或多个值插入到列表头部</span><br><span class="line">lpop key  #移出并获取列表的第一个元素</span><br><span class="line">lset key index value  #通过索引设置元素的值</span><br><span class="line">ltrim key start stop  #对一个列表进行修剪</span><br><span class="line">rpop key  #移除列表的最后一个元素，返回值为移除的元素</span><br><span class="line">rpush key value1[value2...]  #在列表末尾添加一个或多个值</span><br></pre></td></tr></table></figure><h5 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h5><ol><li>Redis 的 Set 是 string 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</li><li>集合对象的编码可以是 intset 或者 hashtable。</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sadd key member1[member2...]  #向集合添加一个或多个成员</span><br><span class="line">scard key  #获取集合的成员数</span><br><span class="line">sdiff key1[key2]  #返回第一个集合与其他集合之间的差异</span><br><span class="line">sinter key1[key2]  #返回给定所有集合的交集</span><br><span class="line">sismember key member  #判断member元素是否是集合key的成员</span><br><span class="line">smembers key  #返回集合中的所有成员</span><br><span class="line">sunion key1[key2]  #返回所有给定集合的并集</span><br></pre></td></tr></table></figure><h5 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h5><ol><li>Redis hash 是一个键值(key&#x3D;&gt;value)对集合。</li><li>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hdel key field1[field2]  #删除一个或多个哈希表字段</span><br><span class="line">hexists key field  #查看哈希表key中，指定的字段是否存在</span><br><span class="line">hset key field value  #将哈希表key中的字段field的值设为value</span><br><span class="line">hget key field  #获取存储在哈希表中指定字段的值</span><br><span class="line">hgetall key  #获取在哈希表中指定key的所有字段和值</span><br><span class="line">hkeys key  #获取所有哈希表中的字段</span><br><span class="line">hvals key  #获取哈希表中所有值</span><br><span class="line">klen key  #获取哈希表中字段的数量</span><br></pre></td></tr></table></figure><h5 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h5><ol><li>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</li><li>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</li><li>zset的成员是唯一的,但分数(score)却可以重复。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2022/05/13/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/05/13/Redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h5 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h5><ol><li>方便扩展（数据之间没有关系，很好扩展）</li><li>大数据量高性能（Redis一秒写8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能比较高）</li><li>数据类型的多样性（不需要事先设计数据库）</li></ol><h5 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h5><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h5 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h5><ol><li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li></ol><h5 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h5><ol><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ol><h5 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h5><ol><li><p>概述</p><p>持久化可以理解为存储，就是将数据存储到一个不会丢失的地方，如果把数据放在内存中，电脑关闭或重启数据就会丢失，所以放在内存中的数据不是持久化的，而放在磁盘就算是一种持久化。</p><p>Redis 的数据存储在内存中，内存是瞬时的，如果 linux 宕机或重启，又或者 Redis 崩溃或重启，所有的内存数据都会丢失，为解决这个问题，Redis 提供两种机制对数据进行持久化存储，便于发生故障后能迅速恢复数据。</p></li><li><p>持久化方式</p><ul><li><p>RDB方式</p><p>Redis Database（RDB），就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。</p><p>RDB 保存了在某个时间点的数据集（全部数据）。存储在一个二进制文件中，只有一个文件。默认是 dump.rdb。RDB 技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响 Redis 的正常使用。RDB 恢复数据时比其他 AOF 速度快。</p><p>RDB 方式的数据持久化，仅需在 redis.conf 文件中配置即可，默认配置是启用的。</p></li><li><p>AOF方式</p><p>Append-only File（AOF），Redis 每次接收到一条改变数据的命令时，它将把该命令写到一个 AOF 文件中（只记录写操作，读操作不记录），当 Redis 重启时，它通过执行 AOF 文件中所有的命令来恢复数据。</p></li></ul></li><li><p>redis 默认优先加载 aof 文件（aof 数据最完整）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity基本原理</title>
      <link href="/2022/05/09/SpringSecurity%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2022/05/09/SpringSecurity%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5><ol><li><p><em>SpringSecurity本质是一个过滤器链</em></p></li><li><p>核心功能：用户认证（Authentication）和用户授权 （Authorization）两个部分</p></li><li><p>SpringSecurity 特点 </p><ul><li>和 Spring 无缝整合。</li><li>全面的权限控制。</li><li>专门为 Web 开发而设计。<ul><li>旧版本不能脱离 Web 环境使用。 </li><li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独 引入核心模块就可以脱离 Web 环境。</li></ul></li><li>重量级</li></ul><blockquote><p>Shiro的特点：(Apache旗下的轻量级权限控制框架)</p><ol><li>轻量级。Shiro主张的理念是把复杂的事情变简单，针对对性能有更高要求的互联网应用有更好表现</li><li>通用性<ul><li>好处：不局限于Web环境，可以脱离Web环境使用</li><li>缺陷：在Web环境下一些特定的需求需要手动编写代码定制</li></ul></li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/05/07/Docker/"/>
      <url>/2022/05/07/Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</p><p>Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。</p><h3 id="与虚拟机的比较"><a href="#与虚拟机的比较" class="headerlink" title="与虚拟机的比较"></a>与虚拟机的比较</h3><p>虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p><h5 id="启动速度"><a href="#启动速度" class="headerlink" title="启动速度"></a>启动速度</h5><p>启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p><p>而启动Docker相当于启动宿主操作系统上的一个进程。</p><h5 id="占用资源"><a href="#占用资源" class="headerlink" title="占用资源"></a>占用资源</h5><p>虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器只能开启几十个的虚拟机。</p><p>而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h5 id="更容易迁移"><a href="#更容易迁移" class="headerlink" title="更容易迁移"></a>更容易迁移</h5><h5 id="更容易维护"><a href="#更容易维护" class="headerlink" title="更容易维护"></a>更容易维护</h5><h5 id="更容易扩展"><a href="#更容易扩展" class="headerlink" title="更容易扩展"></a>更容易扩展</h5>]]></content>
      
      
      <categories>
          
          <category> 编码实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="/2022/05/07/Java%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/05/07/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>容器主要包括Collection和Map两种，Collection存储着对象的集合，而Map存储着键值对(两个对象)的映射表</p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><ol><li><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><ul><li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li><li>HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li><li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li></ul></li><li><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><ul><li>ArrayList：基于动态数组实现，支持随机访问。</li><li>Vector：和 ArrayList 类似，但它是线程安全的。</li><li>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li></ul></li><li><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h5><ul><li>LinkedList：可以用它来实现双向队列。</li><li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li></ul></li></ol><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ol><li>TreeMap：基于红黑树实现。</li><li>HashMap：基于哈希表实现。</li><li>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li><li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li></ol><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>因为ArrayList是基于数组实现的，所以支持快速随机访问。</p><p>RandomAccess接口标识着该类支持快速随机访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>数组默认大小为10。</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ol><li>它的实现与ArrayList类似，但是使用了synchronized进行同步。</li><li>与ArrayList的比较<ul><li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li><li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li></ul></li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ol><li><p>基于双向链表实现，使用Node存储链表节点信息，每个链表存储了first和last指针。</p></li><li><p>与ArrayList的比较</p><p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p><ul><li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</li><li>链表不支持随机访问，但插入删除只需要改变指针。</li></ul></li></ol><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ol><li><p>存储结构</p><p>内部包含了一个 Entry 类型的数组 table。Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表。HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值和散列桶取模运算结果相同的 Entry。</p></li><li><p>与Hashtable的比较</p><ul><li>Hashtable 使用 synchronized 来进行同步。</li><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 的迭代器是 fail-fast 迭代器。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li></ul></li></ol><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ol><li>继承自HashMap，因此具有和HashMap一样的快速查找特性。</li><li>内部维护了一个双向链表，用来维护插入顺序。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象思想</title>
      <link href="/2022/05/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
      <url>/2022/05/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、三大特性"><a href="#一、三大特性" class="headerlink" title="一、三大特性"></a>一、三大特性</h3><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外的接口使其与外部发生联系。用户无需关心对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析来确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>多态分为编译时多态和运行时多态：</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件：</p><ul><li>继承</li><li>覆盖（重写）</li><li>向上转型</li></ul><p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Instument is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wind</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Wind is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Percussion</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Percussion is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Music</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Wind</span>());</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Percussion</span>());</span><br><span class="line">        <span class="keyword">for</span>(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Wind is playing…</p><p>Percussion is playing…</p></blockquote><h3 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h3><h5 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系(Generalization)"></a>泛化关系(Generalization)</h5><p>用来描述继承关系，在Java中使用<code>extends</code>关键字</p><h5 id="实现关系-Realization"><a href="#实现关系-Realization" class="headerlink" title="实现关系(Realization)"></a>实现关系(Realization)</h5><p>用来实现一个接口，在Java中使用<code>implements</code>关键字</p><h5 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系(Aggregation)"></a>聚合关系(Aggregation)</h5><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><h5 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h5><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><h5 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h5><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><h5 id="依赖关系-Dependency"><a href="#依赖关系-Dependency" class="headerlink" title="依赖关系(Dependency)"></a>依赖关系(Dependency)</h5><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p><ul><li>A 类是 B 类方法的局部变量；</li><li>A 类是 B 类方法的参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化。</li></ul><h3 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h3><h5 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h5><blockquote><p>修改一个类的原因应该只有一个。</p></blockquote><p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p><h5 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h5><blockquote><p>类应该对扩展开放，对修改关闭。</p></blockquote><p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p><p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p><h5 id="接口分离原则"><a href="#接口分离原则" class="headerlink" title="接口分离原则"></a>接口分离原则</h5><blockquote><p>子类对象必须能够替换掉所有父类对象。</p></blockquote><p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p><p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度</p><h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><blockquote><p>不应该强迫客户依赖于它们不用的方法。</p></blockquote><p>因此使用多个专门的接口比使用单一的总接口要好。</p><h5 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h5><blockquote><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p><p>依赖于抽象意味着：</p><ul><li>任何变量都不应该持有一个指向具体类的指针或者引用；</li><li>任何类都不应该从具体类派生；</li><li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis易错题总结</title>
      <link href="/2022/05/05/MyBatis%E6%98%93%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/05/MyBatis%E6%98%93%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="1-和-的区别是什么？"><a href="#1-和-的区别是什么？" class="headerlink" title="1. #{}和${}的区别是什么？"></a>1. #{}和${}的区别是什么？</h5><ol><li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和<code> sql</code>内部，属于静态文本替换，比如${driver}会被静态替换为<code>com.mysql.jdbc. Driver</code>。</li><li><code>#&#123;&#125;</code>是 <code>sql</code> 的参数占位符，<code>MyBatis</code> 会将 <code>sql</code> 中的<code>#&#123;&#125;</code>替换为? 号，在 <code>sql</code> 执行前会使用 <code>PreparedStatement</code> 的参数设置方法，按序给 <code>sql</code> 的<code>? </code>号占位符设置参数值，比如 <code>ps.setInt(0, parameterValue)</code>，<code>#&#123;item.name&#125;</code> 的取值方式为使用反射从参数对象中获取 <code>item</code> 对象的<code> name</code> 属性值，相当于 <code>param.getItem().getName()</code></li></ol><h5 id="2-Xml-映射文件中，除了常见的-select-insert-update-delete-标签之外，还有哪些标签？"><a href="#2-Xml-映射文件中，除了常见的-select-insert-update-delete-标签之外，还有哪些标签？" class="headerlink" title="2. Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？"></a>2. <code>Xml </code>映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？</h5><ol><li>还有很多其他的标签， <code>&lt;resultMap&gt;</code> 、 <code>&lt;parameterMap&gt;</code> 、 <code>&lt;sql&gt;</code> 、 <code>&lt;include&gt;</code> 、 <code>&lt;selectKey&gt;</code> ，加上动态<code> sql</code> 的 9 个标签， <code>trim|where|set|foreach|if|choose|when|otherwise|bind</code> 等，其中 <code>&lt;sql&gt;</code> 为 <code>sql</code> 片段标签，通过 <code>&lt;include&gt;</code> 标签引入 <code>sql</code> 片段， <code>&lt;selectKey&gt;</code> 为不支持自增的主键生成策略标签</li></ol><h5 id="3-最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？"><a href="#3-最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？" class="headerlink" title="3. 最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？"></a>3. 最佳实践中，通常一个<code>xml</code>映射文件，都会写一个<code>Dao</code>接口与之对应，那这个<code>Dao</code>接口的工作原理是什么？<code>Dao</code>接口里的方法，参数不同时，方法能不能重载？</h5><ol><li><code>Dao</code>接口的工作原理是<code>JDK</code>动态代理，<code>MyBatis</code>运行时会使用<code>JDK</code>动态代理为<code>Dao</code>接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行<code>MappedStatementsuodaib</code>的<code>sql</code>，然后将<code>sql</code>执行结果返回。</li><li><code>Dao</code>接口方法可以重载，但要满足一下条件<ul><li>仅有一个无参方法和一个有参方法</li><li>多个有参方法时，参数数量必须一致，且使用相同的<code>@Param</code></li><li>多个接口对应的映射必须只有一个，即<code>xml</code>里的<code>id</code>不允许重复</li></ul></li></ol><h5 id="4-MyBatis是如何进行分页的？分页插件的原理是什么？"><a href="#4-MyBatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="4. MyBatis是如何进行分页的？分页插件的原理是什么？"></a>4. <code>MyBatis</code>是如何进行分页的？分页插件的原理是什么？</h5><ol><li><p><code>MyBatis </code>使用 <code>RowBounds </code>对象进行分页，它是针对<code>ResultSet</code>结果集执行的内存分页，而非物理分页</p></li><li><p>可以在 <code>sql</code> 内直接书写带有物理分页的参数来完成物理分页功能</p></li><li><p>也可以使用分页插件来完成物理分页</p><p>分页插件的基本原理是使用<code>MyBatis</code>提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 <code>sql</code>，然后重写<code> sql</code>，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。</p><blockquote><p><code>select _ from student</code> ，拦截 <code>sql</code> 后重写为： <code>select t._ from （select \* from student）t limit 0，10</code></p></blockquote></li></ol><h5 id="5-MyBatis执行批量插入，能返回数据库主键列表吗？"><a href="#5-MyBatis执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="5. MyBatis执行批量插入，能返回数据库主键列表吗？"></a>5. <code>MyBatis</code>执行批量插入，能返回数据库主键列表吗？</h5><ol><li>能，<code>JDBC</code>与<code>MyBatis</code>都可以</li></ol><h5 id="6-MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理"><a href="#6-MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理" class="headerlink" title="6. MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理"></a>6. <code>MyBatis</code>动态<code>sql</code>是做什么的？都有哪些动态<code>sql</code>？简述动态<code>sql</code>的执行原理</h5><ol><li><code>MyBatis</code>动态<code>sql</code>可以让我们在<code>xml</code>映射文件内，以标签的形式编写动态<code>sql</code>，完成逻辑判断和动态拼接<code>sql</code>的功能，<code>MyBatis</code>提供了9种动态<code>sql</code>标签<code>trim|where|set|foreach|if|choose|when|otherwise|bind</code></li><li>执行原理为，使用<code>OGNL</code>从<code>sql</code>参数对象中计算表达式的值，根据表达式的值动态拼接<code>sql</code>，以此来完成动态<code>sql</code>的功能</li></ol><h5 id="7-MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#7-MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="7. MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>7. <code>MyBatis</code>是如何将<code>sql</code>执行结果封装为目标对象并返回的？都有哪些映射形式？</h5><ol><li>使用<code>&lt;resultMap&gt;</code> 标签，逐一定义列名和对象属性名之间的映射关系</li><li>使用<code>sql</code>列的别名功能，将列别名书写为对象属性名</li><li>有了列名与属性名的映射关系后，<code>MyBatis</code>通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的</li></ol><h5 id="8-MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别"><a href="#8-MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别" class="headerlink" title="8. MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别"></a>8. <code>MyBatis</code>能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别</h5><ol><li>关联对象查询，有两种实现方式，一种是单独发送一个<code>sql</code>去查询关联对象，赋给主对象，然后返回主对象；另一种是使用嵌套查询，嵌套查询的含义为使用<code>jion</code>查询，一部分列是A对象的属性值，另一部分列是关联对象B的属性值，好处是只发一个<code>sql</code>查询，就可以把主对象和其关联对象查出来。</li></ol><h5 id="9-MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#9-MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="9. MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>9. <code>MyBatis</code>是否支持延迟加载？如果支持，它的实现原理是什么？</h5><ol><li><code>MyBatis</code> 仅支持 <code>association</code> 关联对象和 <code>collection</code> 关联集合对象的延迟加载，<code>association</code> 指的就是一对一，<code>collection</code> 指的就是一对多查询。在 <code>MyBatis</code> 配置文件中，可以配置是否启用延迟加载 <code>lazyLoadingEnabled=true|false。</code></li><li>它的原理是，使用 <code>CGLIB</code> 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 <code>a.getB().getName()</code> ，拦截器 <code>invoke()</code> 方法发现 <code>a.getB()</code> 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 <code>sql</code>，把 B 查询上来，然后调用 <code>a.setB(b)</code>，于是 a 的对象 b 属性就有值了，接着完成 <code>a.getB().getName()</code> 方法的调用。</li></ol><h5 id="10-MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复"><a href="#10-MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复" class="headerlink" title="10. MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复"></a>10. <code>MyBatis</code>的<code>xml</code>映射文件中，不同的<code>xml</code>映射文件，id是否可以重复</h5><ol><li>不同的<code>xml</code>映射文件，如果配置了<code>namespace</code>，那么id可以重复；如果没有配置<code>namespace</code>，那么<code>id</code>不能重复</li><li>原因是<code>namespace+id</code>是作为<code>Map&lt;String, MappedStatement&gt;</code>的<code>key</code>使用的，如果没有<code>namespace</code>，就只剩下<code>id</code>，那么<code>id</code>重复会导致数据相互覆盖，有了<code>namespace</code>，自然id就可以重复，<code>namespace</code>不同，<code>namespace+id</code>自然也就不同</li></ol><h5 id="11-MyBatis中如何执行批处理"><a href="#11-MyBatis中如何执行批处理" class="headerlink" title="11. MyBatis中如何执行批处理"></a>11. <code>MyBatis</code>中如何执行批处理</h5><ol><li>使用<code>BatchExecutor</code>完成批处理</li></ol><h5 id="12-MyBatis是否可以映射Enum枚举类"><a href="#12-MyBatis是否可以映射Enum枚举类" class="headerlink" title="12. MyBatis是否可以映射Enum枚举类"></a>12. <code>MyBatis</code>是否可以映射<code>Enum</code>枚举类</h5><ol><li><code>MyBatis</code> 可以映射枚举类，不单可以映射枚举类，<code>MyBatis</code> 可以映射任何对象到表的一列上。映射方式为自定义一个 <code>TypeHandler</code> ，实现 <code>TypeHandler</code> 的 <code>setParameter()</code> 和 <code>getResult()</code> 接口方法。 <code>TypeHandler</code> 有两个作用，一是完成从 <code>javaType</code> 至 <code>jdbcType</code> 的转换，二是完成 <code>jdbcType</code> 至 <code>javaType</code> 的转换，体现为 <code>setParameter()</code> 和 <code>getResult()</code> 两个方法，分别代表设置 <code>sql</code> 问号占位符参数和获取列查询结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈@Autowired和@Resource注解的区别</title>
      <link href="/2022/05/01/%E8%B0%88-Autowired%E5%92%8C-Resource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/05/01/%E8%B0%88-Autowired%E5%92%8C-Resource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p><code>@Autowired</code> 和<code>@Resource</code> 可以对成员变量、方法或构造函数进行标注，来完成自动装配的工作。</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ol><li><p><code>@Autowired</code> 默认按类型装配(这个注解是属于<code>spring</code> 的)，默认情况下必须要求依赖对象存在，如果要允许<code>null</code> 值，可以设置它的<code>required</code> 属性为<code>false</code> ，如<code>@Autowired(required=false)</code> ，如果想使用名称装配可以结合<code>@Qualifier</code> 注解进行使用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;userDto&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br></pre></td></tr></table></figure><ul><li><code>@Autowired</code> 的实现</li></ul><blockquote><p>注解驱动配置会向spring容器中注册<code>AutowiredAnnotationBeanPostProcessor</code>。<br> 当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code> 将扫描 <code>Spring </code>容器中所有 Bean，当发现 Bean 中拥有 <code>@Autowired </code>注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。</p></blockquote></li><li><p><code>@Resource</code> 默认按照名称进行装配(<code>JDK1.6</code>开始支持的注解)，名称可以通过<code>name</code>属性进行指定，也提供按照<code>byType</code>注入</p><ul><li>如果没有指定<code>name</code>属性，当注解写在字段上时，默认取字段名，按照名称查找；</li><li>当注解标注在属性的<code>setter</code>方法上，即默认取属性名作为<code>bean</code>名称寻找依赖对象；</li><li>当找不到与名称匹配的bean时才按照类型进行装配，但需要注意的是，如果<code>name</code>属性一旦指定，就只会按照名称进行装配；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;userDto&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(type = UserDto.class)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br></pre></td></tr></table></figure><ul><li><code>@Resource</code> 装配顺序<ul><li>如果同时指定了<code>name</code>和<code>type</code>，则从<code>spring</code>上下文中找到唯一匹配的<code>bean</code>进行装配，找不到则会抛出异常</li><li>如果指定了<code>name</code>，则从上下文中查找名称<code>id</code>匹配的<code>bean</code>进行装配，找不到则抛出异常</li><li>如果指定了<code>type</code>，则从上下文中找到类型匹配的唯一<code>bean</code>进行装配，找不到或找到多个，都会抛出异常</li><li>如果既没有指定<code>name</code>，又没有指定<code>type</code>，则自动按照<code>byName</code>方式进行装配，如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配</li></ul></li></ul></li><li><p><code>@Autowired</code> 和<code>@Resource</code> 作用域不同</p><ul><li><code>@Autowired</code>可以作用在<code>construct</code>，<code>field</code>，<code>setter</code>方法（可以有多个参数，并且参数上可以使用<code>@Qualifies</code>进行标注）</li><li><code>@Resource</code>只可以使用在<code>field</code>，<code>setter</code>方法上（只能是单个单数的<code>setter</code>方法）</li></ul></li></ol><h5 id="Autowired-和-Resource-的正确使用"><a href="#Autowired-和-Resource-的正确使用" class="headerlink" title="@Autowired 和@Resource 的正确使用"></a><code>@Autowired</code> 和<code>@Resource</code> 的正确使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure><p>如上代码常有warning的提示</p><blockquote><p>Field injection is not recommended Inspection info: Spring Team recommends: “Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies”.</p></blockquote><ol><li><p>注入方式</p><ul><li><p>基于构造函数的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于Setter的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">     <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">     </span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>基于字段的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于字段的依赖注入缺点</p><ul><li><p>对于有<code>final</code> 修饰的变量不好使</p><blockquote><p><code>Spring</code>的<code>IOC</code>对待属性的注入使用的是set形式，但是<code>final</code>类型的变量在调用class的构造函数的这个过程当中就得初始化完成，这个是基于字段的依赖注入做不到的地方．只能使用<strong>基于构造函数的依赖注入</strong>的方式</p></blockquote></li><li><p>掩盖单一职责的设计思想</p><blockquote><p>在<code>OOP</code>的设计当中有一个单一职责思想，如果采用的是基于构造函数的依赖注入的方式来使用<code>Spring</code>的<code>IOC</code>的时候，当你注入的太多的时候，这个构造方法的参数就会很庞大</p></blockquote></li><li><p>与<code>Spring</code>的<code>IOC</code>机制紧密耦合</p><blockquote><p>当你使用<strong>基于字段的依赖注入</strong>方式的时候，确实可以省略构造方法和<code>setter</code>这些个模板类型的方法，但是，你把控制权全给<code>Spring</code>的<code>IOC</code>了，别的类想重新设置下你的某个注入属性，没法处理(当然反射可以做到)。</p><p>本身<code>Spring</code>的目的就是解藕和依赖反转，结果通过再次与类注入器，失去了通过自动装配类字段而实现的对类的解耦，从而使类在<code>Spring</code>容器之外无效。</p></blockquote></li><li><p>隐藏依赖性</p><blockquote><p>当你使用<code>Spring</code>的<code>IOC</code>的时候，被注入的类应当使用一些<code>public</code>类型(构造方法，和setter类型方法)的方法来向外界表达:我需要什么依赖.但是基于字段的依赖注入的方式，基本都是<code>private</code>形式的，<code>private</code>把属性都给封印到<code>class</code>当中了。</p></blockquote></li></ul></li></ol><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol><li>应避免使用基于字段的依赖注入，推荐使用基于构造函数和基于<code>setter</code>的依赖注入</li><li>对于必需的依赖项，建议使用基于构造函数的注入，以使它们成为不可变的，并防止它们为<code>null</code></li><li>对于可选的依赖项，建议使用基于<code>setter</code>的注入</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot如何去获取前端传递的参数</title>
      <link href="/2022/05/01/spring-boot%E5%A6%82%E4%BD%95%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%82%E6%95%B0/"/>
      <url>/2022/05/01/spring-boot%E5%A6%82%E4%BD%95%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数"><a href="#spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数" class="headerlink" title="spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数"></a><em>spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数</em></h5><h5 id="url-里的参数"><a href="#url-里的参数" class="headerlink" title="url 里的参数"></a><code>url</code> 里的参数</h5><ol><li><p>路径参数</p><p>是指再请求路径里携带的参数，如</p><blockquote><p>前端请求：</p><p>Get：<a href="http://localhost:8081/user/123">http://localhost:8081/user/123</a></p></blockquote><blockquote><p>后端获取：</p><p>@GetMapping(“&#x2F;{id}”)</p><p>public Integer getUserId(@PathVariable(name &#x3D; “id”) Integer id){</p><p>​return id;</p><p>}</p></blockquote></li><li><p>查询参数</p><p>查询参数就是请求的<code>url</code> 里<code>?</code> 后的键值对</p><blockquote><p>前端请求：</p><p>Get：<a href="http://localhost:8081/user?id=123">http://localhost:8081/user?id=123</a></p></blockquote><p><em>请求url里的查询参数通过@RequestParam注解可以和方法里的参数进行一一对应</em></p><blockquote><p>后端获取：</p><p>@GetMapping(“&#x2F;user”)</p><p>public Integer getUserId(@RequestParm(name &#x3D; “id”) Integer id){</p><p>​return id;</p><p>}</p></blockquote></li><li><p>路径参数和查询参数结合</p><p>同上</p></li></ol><h5 id="请求body-里的参数"><a href="#请求body-里的参数" class="headerlink" title="请求body 里的参数"></a>请求<code>body</code> 里的参数</h5><p><em>当前端传递过来一个<code>json</code>数据，通常采用一下两种方式来接收</em></p><ol><li><p>Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">createBanner</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; banner)</span>&#123;</span><br><span class="line">    banner.put(<span class="string">&quot;id&quot;</span>, <span class="number">1243</span>);</span><br><span class="line">    <span class="keyword">return</span> banner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>@RequestBody</code> 的这个注解将<code>body</code> 里的参数转化成一个<code>map</code> </p><p><strong>不推荐使用</strong></p></li><li><p>自定义对象Dto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createBanner</span><span class="params">(<span class="meta">@RequestBody</span> BannerDto banner)</span>&#123;</span><br><span class="line"><span class="comment">//具体实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用<code>@RequestBody</code> 来标记<code>BannerDto</code> 对象，<code>spring-boot</code> 会自动调用对象的<code>getter</code> 和<code>setter</code> 方法给它赋值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot获取值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Echarts报错</title>
      <link href="/2022/04/29/%E4%BD%BF%E7%94%A8Echarts%E6%8A%A5%E9%94%99Error-Initialize-failed-invalid-dom/"/>
      <url>/2022/04/29/%E4%BD%BF%E7%94%A8Echarts%E6%8A%A5%E9%94%99Error-Initialize-failed-invalid-dom/</url>
      
        <content type="html"><![CDATA[<h3 id="使用Echarts-报错Error-Initialize-failed-invalid-dom"><a href="#使用Echarts-报错Error-Initialize-failed-invalid-dom" class="headerlink" title="使用Echarts 报错Error: Initialize failed: invalid dom."></a><strong>使用<code>Echarts</code> 报错<code>Error: Initialize failed: invalid dom.</code></strong></h3><blockquote><p><code>[Vue warn]: Error in mounted hook: &quot;Error: Initialize failed:invalid dom.&quot;</code></p></blockquote><h4 id="报错代码："><a href="#报错代码：" class="headerlink" title="报错代码："></a>报错代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getChart</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> option = &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&quot;会员性别数量统计&quot;</span>,</span><br><span class="line">          <span class="attr">subtext</span>: <span class="string">&quot;趋势图&quot;</span>,</span><br><span class="line">          <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="string">&quot;女&quot;</span>, <span class="string">&quot;男&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">data</span>: [],</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">data</span>: [],</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> chartDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(chartDom);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Echarts</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        option.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = res.<span class="property">data</span>;</span><br><span class="line">        option.<span class="property">series</span>[<span class="number">1</span>].<span class="property">data</span> = res.<span class="property">data</span>;</span><br><span class="line">        myChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h4><p><code>created</code> 中元素还未挂载到页面，此时操作DOM则会报错。</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>在<code>mounted</code> 中调用操作元素的方法，当页面执行到<code>mounted</code> 时，该页面所有元素都已经挂载完成。</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getChart</span>();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--单例模式</title>
      <link href="/2022/04/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><p><em>属于创建型模式，它提供了一种创建对象的最佳方式。</em></p><h5 id="1-特征"><a href="#1-特征" class="headerlink" title="1. 特征"></a>1. 特征</h5><ol><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ol><h5 id="2-主要解决"><a href="#2-主要解决" class="headerlink" title="2. 主要解决"></a>2. 主要解决</h5><ol><li>一个全局使用的类频繁地创建与销毁。</li></ol><h5 id="3-何时使用："><a href="#3-何时使用：" class="headerlink" title="3. 何时使用："></a>3. 何时使用：</h5><ol><li>当您想控制实例数目，节省系统资源的时候。</li></ol><h5 id="4-如何解决："><a href="#4-如何解决：" class="headerlink" title="4. 如何解决："></a>4. 如何解决：</h5><ol><li>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</li></ol><h5 id="5-关键代码："><a href="#5-关键代码：" class="headerlink" title="5. 关键代码："></a>5. 关键代码：</h5><ol><li>构造函数是私有的。</li></ol><h5 id="6-优点："><a href="#6-优点：" class="headerlink" title="6. 优点："></a>6. 优点：</h5><ol><li><p>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p></li><li><p>避免对资源的多重占用（比如写文件操作）。</p></li></ol><h5 id="7-缺点："><a href="#7-缺点：" class="headerlink" title="7. 缺点："></a>7. 缺点：</h5><ol><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li></ol><h5 id="8-应用场景"><a href="#8-应用场景" class="headerlink" title="8. 应用场景"></a>8. 应用场景</h5><ol><li>在应用场景中，某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。</li><li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li><li>当某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。</li></ol><h4 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h4><h5 id="1-懒汉式"><a href="#1-懒汉式" class="headerlink" title="1. 懒汉式"></a>1. 懒汉式</h5><p>​     描述：具备很好的lazy loading，能够在多线程中很好的工作，但效率低</p><p>​     优点：第一次调用才初始化，避免内存浪费</p><p>​     缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-饿汉式"><a href="#2-饿汉式" class="headerlink" title="2. 饿汉式"></a>2. 饿汉式</h5><p>​     描述：不具备 lazy loading，但比较常用，容易产生垃圾对象</p><p>​     优点：没有加锁，执行效率会提高</p><p>​     缺点：类加载时就初始化，浪费内存</p><p>​     基于 <code>classloader</code> 机制避免了多线程的同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-双检锁-x2F-双重校验锁-DCL-即double-checked-locking"><a href="#3-双检锁-x2F-双重校验锁-DCL-即double-checked-locking" class="headerlink" title="3. 双检锁&#x2F;双重校验锁(DCL, 即double-checked locking)"></a>3. 双检锁&#x2F;双重校验锁(DCL, 即double-checked locking)</h5><p>​     描述：采用双锁机制，安全且在多线程情况下能保持高性能，可在实例域需要延迟初始化时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-登记式-x2F-静态内部类"><a href="#4-登记式-x2F-静态内部类" class="headerlink" title="4. 登记式&#x2F;静态内部类"></a>4. 登记式&#x2F;静态内部类</h5><p>​     利用<code>classloader</code> 机制来保证只有一个线程，只适用于静态域的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5. 枚举"></a>5. 枚举</h5><p>​     <code>JDK1.5 </code> 及以后，不具备<code>lazy loading</code> ，但则是实现单例模式的最佳方法，自动支持序列化机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--工厂模式</title>
      <link href="/2022/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql中UTF-8编码总结</title>
      <link href="/2022/04/25/MySql%E4%B8%ADUTF-8%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/25/MySql%E4%B8%ADUTF-8%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在<code>MySQL</code>中，<code>UTF-8</code> 编码只<strong>支持每个字符最多三个字节</strong>，而真正的 <code>UTF-8 </code> 是每个字符最多四个字节。 在<code>UTF-8</code> 编码中，中文是占3个字节，其他数字、英文、符号占一个字节。 但<code>emoji</code>符号占4个字节，一些较复杂的文字、繁体字也是4个字节，在<code>MySQL</code> 中应使用<code>utf8mb4</code> 编码。</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>共有23中设计模式，这些模式可以分为三大类：创建型模式<code>Creational Patterns </code> ，结构型模式<code>Structral Patterns</code> ，行为型模式<code>Behavioral Patterns</code> 。</p><h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p>​提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ol><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ol><h5 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h5><p>​关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ol><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ol><h5 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h5><p>​关注对象之间的通信。</p><ol><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ol><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><h5 id="1-开闭原则（Open-Close-Principle）"><a href="#1-开闭原则（Open-Close-Principle）" class="headerlink" title="1. 开闭原则（Open Close Principle）"></a>1. 开闭原则（Open Close Principle）</h5><p>​即对扩展开放，对修改关闭。在程序需要进行扩展的时候，不能去修改原有的代码，实现一个热插拔的效果。使程序的扩展性更好，易于维护和升级。通常采用接口和抽象类来实现。</p><h5 id="2-里氏代换原则（Liskov-Substitution-Principle）"><a href="#2-里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2. 里氏代换原则（Liskov Substitution Principle）"></a>2. 里氏代换原则（Liskov Substitution Principle）</h5><p>​ 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h5 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒转原则（Dependence Inversion Principle）"></a>3. 依赖倒转原则（Dependence Inversion Principle）</h5><p>​这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>​这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h5 id="5-迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5-迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5. 迪米特法则，又称最少知道原则（Demeter Principle）"></a>5. 迪米特法则，又称最少知道原则（Demeter Principle）</h5><p>​最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h5 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6. 合成复用原则（Composite Reuse Principle）"></a>6. 合成复用原则（Composite Reuse Principle）</h5><p>​合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习-索引</title>
      <link href="/2022/04/23/MySql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/04/23/MySql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><ol><li>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引</li></ol><h3 id="索引的实现原理"><a href="#索引的实现原理" class="headerlink" title="索引的实现原理"></a>索引的实现原理</h3><ol><li>在<code>MySql</code> 数据库当中索引是需要排序的，<code>因为只有排序才会有区间查找，也能缩小范围</code>，并且这个排序和<code>TreeSet</code> 数据结构相同，其底层是一个自平衡的二叉树，在<code>MySql</code> 中索引是一个B-Tree数据结构。</li><li>遵循左小右大原则存放，采用中序遍历方式遍历数据</li><li>在任何数据库当中，主键上都会自动添加索引对象，在<code>MySql</code> 当中，一个字段上如果有unique约束的话，也会自动创建索引对象</li><li>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号</li><li>在<code>MySql</code> 中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在<code>MyISAM</code> 存储引擎中，索引存储在一个<code>.MYI</code> 文件中；在<code>InnoDB</code> 存储引擎中索引被存储在一个逻辑名称叫<code>tablespace</code> 的当中；在MEMORY存储引擎中索引被存储在内存当中。不管索引存储在哪里，索引在<code>MySql</code> 当中都是一个树的形式存在<code>平衡二叉树</code> 。</li></ol><h3 id="什么条件下会添加索引"><a href="#什么条件下会添加索引" class="headerlink" title="什么条件下会添加索引"></a>什么条件下会添加索引</h3><ol><li><p>数据量庞大</p></li><li><p>该字段经常出现在where的后面，以条件的形式存在，也就是做这个字段总被扫描</p></li><li><p>该字段很少的<code>DML</code> 操作，因为<code>DML</code> 后，索引需要重新排序</p><blockquote><p>建议不要随意添加索引，因为索引也是要维护的，太多的话反而会降低系统的性能</p><p>建议通过主键或unique约束的字段进行查询，效率是比较高的</p></blockquote></li></ol><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><blockquote><p>masql&gt;CREATE INDEX indexName ON table_name (column_name)</p></blockquote><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><ol><li><p>select * from table where name like ‘%T’&#96; name上即使添加了索引，也不会走索引，因为模糊匹配当中以“%”开头了，尽量避免模糊查询的时候以“%”开始 </p></li><li><p>使用or的时候会失效，如果使用or那么要求or两边字段都要有索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个字段上的索引也会实现，所以这就是为什么不建议使用or的原因</p></li><li><p>使用复合索引的时候，没有使用左侧的列查询，索引失效</p></li><li><p>在where当中索引列参加了运算，索引失效</p></li><li><p>在where当中索引列使用了函数</p></li><li><p>索引是各种数据库进行优化的重要手段，优化的时候优先考虑的因素就是索引</p><ul><li><p>单一索引：一个字段上添加索引</p></li><li><p>复合索引：两个字段或更多的字段上添加索引</p></li><li><p>主键索引：主键上添加索引</p></li><li><p>唯一性索引：具有unique的约束的字段上添加索引</p><blockquote><p>唯一性比较弱的字段上添加索引用处不大</p></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习--事务</title>
      <link href="/2022/04/20/MySql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/04/20/MySql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>一个事务就是一个完整的业务逻辑，是一个最小的工作单元，不可再分</li><li>只有<code>DML</code> 语句才与事务有关</li><li>提交事务：<code>commit</code> ；回滚事务：<code>rollback</code> ；</li><li><code>mysql</code> 默认开启自动提交事务，若需手动开启，则先执行<code> begin</code> 或<code>start transaction</code>或<code>set autocommit=0</code>，用来禁止使用当前会话的自动提交，最后手动输入执行<code>commit</code> 命令</li><li>事务处理可以用来维护数据库的完整性，保证成批的 <code>SQL </code> 语句要么全部执行，要么全部不执行。</li></ol><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><ol><li><p>原子性（<strong>A</strong>tomicity，或称不可分割性）</p><p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>一致性（<strong>C</strong>onsistency）</p><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p>隔离性（<strong>I</strong>solation，又称独立性）</p><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读已提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</p></li><li><p>持久性（<strong>D</strong>urability）</p><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ol><h3 id="事务间的隔离级别"><a href="#事务间的隔离级别" class="headerlink" title="事务间的隔离级别"></a>事务间的隔离级别</h3><ol><li>读未提交<code>Read uncommitted</code> ：最低的隔离级别。事务A可以读到事务B未提交的数据，存在的问题是脏读现象，称读到了脏数据；</li><li>读已提交<code>Read Committed</code> ：事务A只能读到事务B已提交的数据，解决了脏读现象，存在不可重复读取数据的问题（在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取数据的时候读到的数据是4条，3&lt;&gt;4，称为不可重复读（Oracle默认的事务隔离级别）</li><li>可重复读<code>Repeatable Reads</code> ：事务A开启之后，不管是多久，每一次再事务A中读取到的数据都是一致的，即使事务B将数据已修改，并且提交了，事务A读取到的数据还是没有发生改变；解决了不可重复读的问题，出现了幻影读，即不够真实（Mysql默认的事务隔离级别）</li><li>序列化&#x2F;串行化<code>Serializable</code> ：是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行。脏读、不可重复读、幻读都不会出现。</li></ol><h3 id="事务处理的两种方法"><a href="#事务处理的两种方法" class="headerlink" title="事务处理的两种方法"></a>事务处理的两种方法</h3><ol><li>用 BEGIN, ROLLBACK, COMMIT来实现<ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul></li><li>直接用 SET 来改变 MySQL 的自动提交模式:<ul><li><strong>SET AUTOCOMMIT &#x3D; 0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT &#x3D; 1</strong> 开启自动提交</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习--基础</title>
      <link href="/2022/04/19/MySql%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/19/MySql%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li><strong>-u</strong> : 登录的用户名;</li><li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ul><p>若登录本机的MySQL数据库，则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use 数据库名</span><br></pre></td></tr></table></figure><h5 id="列出-MySQL-数据库管理系统的数据库列表"><a href="#列出-MySQL-数据库管理系统的数据库列表" class="headerlink" title="列出 MySQL 数据库管理系统的数据库列表"></a>列出 MySQL 数据库管理系统的数据库列表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><h5 id="显示指定数据库的所有表"><a href="#显示指定数据库的所有表" class="headerlink" title="显示指定数据库的所有表"></a>显示指定数据库的所有表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="表的创建与删除"><a href="#表的创建与删除" class="headerlink" title="表的创建与删除"></a>表的创建与删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 数据类型, ...);</span><br></pre></td></tr></table></figure><h5 id="快速创建表"><a href="#快速创建表" class="headerlink" title="快速创建表"></a>快速创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> teble table1 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure><p><em>将一个查询结果当作一张表新建</em></p><h5 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h5><ol><li><p>delete原理：一个一个删，数据在硬盘上的真实存储空间不会被释放，效率低，但可回滚</p></li><li><p>truncate：效率高，不支持回滚，物理删除</p></li></ol><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="sql的分类"><a href="#sql的分类" class="headerlink" title="sql的分类"></a>sql的分类</h3><ol><li><p>数据查询语言（DQL-Data Query Language）</p><p>代表关键字：select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件]</span><br><span class="line">[LIMIT N]</span><br></pre></td></tr></table></figure></li><li><p>数据操作语言（DML-Data Manipulation Language）</p><p>代表关键字：insert, delete, update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause];</span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span>value1, field2<span class="operator">=</span>value2 [<span class="keyword">WHERE</span> Clause];</span><br></pre></td></tr></table></figure></li><li><p>数据定义语言（DDL-Data Definition Language）</p><p>代表关键字：create, drop, alter</p></li><li><p>事务控制语言（TCL-Transactional Control Language）</p><p>代表关键字：commit, rollback</p></li><li><p>数据控制语言（DCL-Data Control Language）</p><p>代表关键字：grant, revoke</p></li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>from &gt; where &gt; group by &gt; having &gt; select &gt; order by &gt; limit</p><ol><li><p>group by</p><p><code>group by</code>语句根据一个或多个列对结果集进行分组。在分组的列上可以使用 COUNT, SUM, AVG,等函数。</p></li><li><p>having</p><p><code>having</code> 后可接聚合函数</p></li><li><p>order by</p><p><code>order</code> 用来对查询结果进行一个或多个字段排序</p><p> ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列</p></li></ol><h3 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h3><blockquote><p>多表连接会降低查询效率，因为笛卡尔积的原因查询次数为两张表行数的乘积，只是显示的有所不同。</p></blockquote><ol><li>内连接(inner)：等值连接，非等值连接，自连接</li><li>外连接(outer)：左外连接，右外连接</li><li>全连接</li></ol><h5 id="表连接语法"><a href="#表连接语法" class="headerlink" title="表连接语法"></a>表连接语法</h5><ol><li>SQL92语法：(结构不清晰)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b</span><br><span class="line"><span class="keyword">from</span> table1,table2</span><br><span class="line"><span class="keyword">where</span> table1.no <span class="operator">=</span> table2.no</span><br></pre></td></tr></table></figure><ol start="2"><li>SQL99语法：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b</span><br><span class="line"><span class="keyword">from</span> table1 <span class="keyword">join</span> table2 <span class="keyword">on</span> table1.no <span class="operator">=</span> table2.no</span><br></pre></td></tr></table></figure><h5 id="左连接与右连接"><a href="#左连接与右连接" class="headerlink" title="左连接与右连接"></a>左连接与右连接</h5><ol><li><p>right join … on.. 或 left join … on … 中right &#x2F; left 表示将join关键字右 &#x2F; 左边的这张表看成主表，主要是为了将这张表的数据全部查询出来，顺便着关联查询左 &#x2F; 右边的表。</p></li><li><p>外连接的查询结果条数 &gt;&#x3D; 内连接的查询结果条数</p></li></ol><h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><ol><li>用于连接两次的查询结果，减少查询次数，将乘法变成了加法运算</li><li>结果集合合并时列和列的数据类型也要相同</li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ol><li><p>非空约束：not null</p></li><li><p>唯一性约束：unique</p></li><li><p>主键约束：primary key</p></li><li><p>外键约束：foreign key</p></li><li><p>检查约束：check（mysql不支持，oracle支持）</p><blockquote><p>子表中的外键引用的父表中的某个字段，被引用的这个字段必须是主键吗？不一定是主键，但至少具有unique约束</p></blockquote></li></ol><h3 id="字符串转日期类型"><a href="#字符串转日期类型" class="headerlink" title="字符串转日期类型"></a>字符串转日期类型</h3><ol><li>str_to_date(‘字符串日期’,’日期格式’)</li><li>mysql的日期格式：%Y年 %m月 %d日 %h时 %i分 %s秒</li><li>如果提供的日期字符串类型是(‘年-月-日’)格式，则不需要str_to_date函数进行转换</li></ol><h3 id="null值处理"><a href="#null值处理" class="headerlink" title="null值处理"></a>null值处理</h3><ol><li><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL &#x3D; NULL 返回 NULL 。</p><blockquote><p><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</p><p><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</p><p><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</p></blockquote></li><li><p>涉及null的计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> , columnName1<span class="operator">+</span>ifnull(columnName2,<span class="number">0</span>) <span class="keyword">from</span> tableName;</span><br></pre></td></tr></table></figure><p>columnName1，columnName2 为 int 型，当 columnName2 中，有值为 null 时，columnName1+columnName2&#x3D;null， ifnull(columnName2,0) 把 columnName2 中 null 值转为 0。</p></li><li><p>在MySQL和SQLServer中，null值默认最小，在Oracle中，null值默认最大</p></li></ol><h3 id="MySQL导入数据"><a href="#MySQL导入数据" class="headerlink" title="MySQL导入数据"></a>MySQL导入数据</h3><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><ol><li><p>使用mysql命令导入语法格式为</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u用户名    <span class="operator">-</span>p密码    <span class="operator">&lt;</span>  要导入的数据库数据</span><br></pre></td></tr></table></figure></blockquote></li><li><p>source 命令导入数据库需要先登录到数库终端</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source 文件名</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--Lambda表达式</title>
      <link href="/2022/04/18/Java%E5%AD%A6%E4%B9%A0-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/04/18/Java%E5%AD%A6%E4%B9%A0-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="函数式接口的定义"><a href="#函数式接口的定义" class="headerlink" title="函数式接口的定义"></a>函数式接口的定义</h3><ol><li>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</li><li>对于函数式接口，可以通过lambda表达式来创建该接口的对象。</li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Lambda 表达式的主要作用就是可以用于简化创建匿名内部类对象，Lambda 表达式的代码块将会用于实现抽象方法的方法体，Lambda 表达式就相当于一个匿名方法。</p><p>Lambda 表达式由三部分组成：</p><ul><li>形参列表：形参列表允许省略类型，如果形参列表中只有一个参数，形参列表的圆括号也可以省略；</li><li>箭头（<code>-&gt;</code>）：通过英文画线和大于符号组成；</li><li>代码块：如果代码块只有一条语句，花括号可以省略。Lambda 代码块只有一条 return 语句，可以省略 return 关键字，Lambda 表达式会自动返回这条语句的值作为返回值。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式与函数式接口"><a href="#Lambda表达式与函数式接口" class="headerlink" title="Lambda表达式与函数式接口"></a>Lambda表达式与函数式接口</h3><p>Lambda 表达式的类型，也被称为「目标类型（<code>target type</code>）」。<strong>Lambda 表达式的目标类型必须是「函数式接口（<code>functional interface</code>）」</strong>。函数式接口代表只包含一个抽象方法的接口。函数式接口可以包含多个默认方法、类方法，但仅能声明一个抽象方法。</p><blockquote><p>查询 Java 8 的 API 文档，可以发现大量的函数式接口，例如：Runnable、ActionListener 等接口都是函数式接口。</p></blockquote><p>由于 Lambda 表达式的结果就是被当做对象&#x2F;实例，因此，可以使用 Lambda 表达式进行赋值，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看一下 Runnable 接口的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一个错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面这段代码会报错：<code>Target type of a lambda conversion must be an interface</code>。Lambda 表达式的目标类型必须是明确的函数式接口！将 Lambda 表达式赋值给 Object 类型的变量，编译器只能推断出它的表达类型为 Object，而 Object 并不是函数式接口，因此就报错了！</p><p>为了保证 Lambda 表达式的目标类型是明确的函数式接口，有如下三种常见方式：</p><ul><li>将 Lambda 表达式赋值给函数式接口类型的变量；</li><li>将 Lambda 表达式作为函数式接口类型的参数传给某个方法；</li><li>使用函数式接口对 Lambda 表达式进行强制类型转换；</li></ul><p>将上面出错的代码可以进行如下的改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> (Runnable)() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式与匿名内部类的联系和区别"><a href="#Lambda表达式与匿名内部类的联系和区别" class="headerlink" title="Lambda表达式与匿名内部类的联系和区别"></a>Lambda表达式与匿名内部类的联系和区别</h3><p>Lambda 表达式与匿名内部类存在如下相同点：</p><ul><li>Lambda 表达式与匿名内部类一样，都可以直接访问 <code>effectively final</code> 的局部变量，以及外部类的成员变量（包括示例变量和类变量）；</li><li>Lambda 表达式创建的对象与匿名内部类生成的对象一样，都可以直接调用从接口中继承的默认方法；</li></ul><p>Lambda 表达式与匿名内部类的区别：</p><ul><li>匿名内部类可以为任意接口创建实例，不管接口包含多少个抽象方法，只要匿名内部类实现所有抽象方法即可；但是 Lambda 表达式只能为函数式接口创建实例；</li><li>匿名内部类可以为抽象类甚至普通类创建实例，但是 Lambda 表达式只能为函数式接口创建实例；</li><li>匿名内部类实现的抽象方法体允许调用接口中定义的默认方法，但是 Lambda 表达式的代码块不允许调用接口中定义的默认方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lambdaTest01</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Idfs1</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Dfs</span> <span class="variable">idfs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Idfs0</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Idfs1</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Idfs2</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Idfs2</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Dfs</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用lambda简化</span></span><br><span class="line">idfs = () -&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;lambda--4&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">System.out.println(<span class="string">&quot;lambda--&quot;</span>+i);</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dfs</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Idfs0</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--线程</title>
      <link href="/2022/04/17/Java%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/04/17/Java%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li>Process 进程；Thread线程</li></ol><p>一个进程包括由操作系统分配的内存空间，包含一个或多个线程。</p><p>一个线程不能独立的存在，它必须是进程的一部分。</p><p>一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><ol><li>Thread.currentThread().getName() 获取当前线程的名称</li></ol><h4 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h4><ol><li>将一个类声明为Thread的子类；重写run方法</li></ol><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li>不建议使用：避免OOP单继承局限性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承Thread类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//重写run方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="type">day01</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">day01</span>();</span><br><span class="line"><span class="comment">//调用start方法</span></span><br><span class="line">d.start();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)</span><br><span class="line">System.out.println(<span class="string">&quot;main方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现Runnable接口；实现run()方法</li></ol><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTest2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ProcessTest2</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessTest2</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;run()方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>真实对象和代理对象都要实现同一个接口代理对象要代理真实对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StactProxy</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">WeddingCompany</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(<span class="keyword">new</span> <span class="title class_">You</span>());</span><br><span class="line">w.happyMarry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;结婚&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Marry target;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry marry)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target = marry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target.happyMarry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：代理对象可以做很多真实对象做不了的事；真实对象专注作自己的事情</p><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>创建(new Thread())，就绪，阻塞，运行，死亡</p><p>当调用start() 方法，线程立即进入就绪状态，但不意味着立即调度执行</p><h4 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h4><ol><li>setPriority(int newPriority) 更改线程的优先级</li><li>static void sleep(long millis) 在指定的毫秒数内让当前正在执行的线程休眠</li><li>void jion() 等待该线程终止</li><li>static void yield() 暂停当前正在执行的线程对象，并执行其他线程</li></ol><h4 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试stop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 86136</span></span><br><span class="line"><span class="comment"> * 1. 建议线程正常停止---&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment"> * 2. 建议使用标志位----&gt;设置一个标志位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StopTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">StopTest</span> <span class="variable">stopTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopTest</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(stopTest).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;主线程----&quot;</span>+i);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">200</span>) &#123;</span><br><span class="line">stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;run---&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><ol><li>sleep(时间) 指定当前线程阻塞的毫秒数</li><li>sleep 存在异常 InterruptedException</li><li>sleep 时间达到后线程进入就绪状态</li><li>每一个对象都有一个锁，sleep 不会释放锁</li></ol><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><ol><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>礼让不一定成功</li></ol><blockquote><p>Thread.yield();</p></blockquote><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>用数字表示，范围从1~10</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><ol><li>关键字：synchronized</li><li>当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可</li><li>存在的问题：</li></ol><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题</li></ul><p><em>同步方法</em></p><blockquote><p>public synchronized void method(int args) {}</p></blockquote><p>synchronized 方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized 方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p><p><em>同步块</em></p><blockquote><p>synchronized(Obj) {}</p></blockquote><ul><li>Obj 称为同步监视器，可以是任何对象，但推荐使用共享资源作为同步监视器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个人取款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">100</span>,<span class="string">&quot;工作&quot;</span>);</span><br><span class="line"><span class="type">Drawing</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account,<span class="number">50</span>,<span class="string">&quot;ni&quot;</span>);</span><br><span class="line"><span class="type">Drawing</span> <span class="variable">I</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account,<span class="number">100</span>,<span class="string">&quot;me&quot;</span>);</span><br><span class="line">you.start();</span><br><span class="line">I.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> money, String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">Account account;<span class="comment">//账户</span></span><br><span class="line"><span class="type">int</span> nowMoney;</span><br><span class="line"><span class="type">int</span> drawingMoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Drawing</span><span class="params">(Account account, <span class="type">int</span> drawingMoney, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.account = account;</span><br><span class="line"><span class="built_in">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(account) &#123;</span><br><span class="line"><span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">account.money = account.money - drawingMoney;</span><br><span class="line">nowMoney = nowMoney + drawingMoney;</span><br><span class="line">System.out.println(account.name+<span class="string">&quot;余额&quot;</span>+account.money);</span><br><span class="line">System.out.println(<span class="built_in">this</span>.getName()+<span class="string">&quot;手里的钱&quot;</span>+nowMoney);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h4><blockquote><p>wait()</p></blockquote><p>生产者消费者模型</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ol><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。</li><li>好处：</li></ol><ul><li>提高响应速度</li><li>降低资源消耗</li><li>便于线程管理</li></ul><blockquote><p>corePoolSize:核心池的大小</p><p>maximumPoolSize:最大线程数</p><p>keepAliveTime:线程没有任务时最多保持多长时间后会终止</p></blockquote><ol><li>JDK 5.0 起提供了线程池相关API：ExecutorService(接口) 和 Executors(工具类、线程池的工厂类)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行任务/命令，没有返回值，一般用来执行Runnable</span></span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接池</span></span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//pool-1-thread-3</span></span><br><span class="line"><span class="comment">//pool-1-thread-1</span></span><br><span class="line"><span class="comment">//pool-1-thread-4</span></span><br><span class="line"><span class="comment">//pool-1-thread-2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--泛型</title>
      <link href="/2022/04/16/Java%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2022/04/16/Java%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本质：参数化类型-所操作的数据类型被指定为一个参数"><a href="#本质：参数化类型-所操作的数据类型被指定为一个参数" class="headerlink" title="本质：参数化类型(所操作的数据类型被指定为一个参数)"></a>本质：参数化类型(所操作的数据类型被指定为一个参数)</h3><h3 id="为什么引入泛型"><a href="#为什么引入泛型" class="headerlink" title="为什么引入泛型"></a>为什么引入泛型</h3><ol><li>对于容器类型，如数组、ArrayList、HashMap等，使用数组时需要指定所装的对象类型，如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br></pre></td></tr></table></figure><ol><li>对于集合类型容器，如ArrayList、HashMap、TreeSet等，它们不但是容器，还提供了一些方法对容器内对象的操作方法，如get，set，sort。这个时候就需要知道容器内放的是什么类型的对象，才能return或set。正因为程序开发人员可能把任何类型的对象放进集合容器，所以这些容器在设计的时候只设计成Object类型对象，因为Object是根类；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListContainer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这样的话，根据多态，容器就能装任何类型的对象了。不过，取出对象时则需求进行强制类型转换，转换成实际的类型。但这样会有很多类型不安全问题，为什么呢？因为编译器没法帮忙做类型检查，导致代码在运行时易于出现ClassCastException异常。</li><li>利用泛型，重新设计，参数化类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListContainer</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getObj</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(T obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>这里的<T>的 T 的类型的参数，具体 T 指代什么类型，在调用时再指定，如</p><p>ListContainer<String> myCon &#x3D; new ListContainer&lt;&gt;();</p></li></ol><h3 id="泛型标记符"><a href="#泛型标记符" class="headerlink" title="泛型标记符"></a>泛型标记符</h3><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong>- 表示不确定的 java 类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/04/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/04/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p> 愿你精疲力尽时有树倚</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
