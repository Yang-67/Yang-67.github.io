<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven</title>
      <link href="/2022/08/11/Maven/"/>
      <url>/2022/08/11/Maven/</url>
      
        <content type="html"><![CDATA[<h3 id="POM-Project-Object-Model-项目对象模型"><a href="#POM-Project-Object-Model-项目对象模型" class="headerlink" title="POM ( Project Object Model,项目对象模型 )"></a>POM ( Project Object Model,项目对象模型 )</h3><ol><li>pom是Maven工程的基本工作单元，是一个xml文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</li><li>执行任务或目标时，Maven会在当前目录中查找POM，它读取POM，获取所需的配置信息，然后执行目标。</li><li>在创建POM之前，我们首先需要描述项目组（groupid），项目的唯一ID</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>所有的pom文件都需要project元素和三个必需字段：groupid，artifactid，version</li></ol><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>project</td><td>工程的根标签</td></tr><tr><td>modelVersion</td><td>模型版本</td></tr><tr><td>groupid</td><td>这是工程组的标识，在一个组织或者项目中通常是唯一的</td></tr><tr><td>artifactid</td><td>这是工程的标识，它通常是工程的名称（groupid和artifactid一起定义了artifact在仓库中的位置）</td></tr><tr><td>version</td><td>这是工程的版本号。在artifact的仓库中，用来区分不同的版本</td></tr></tbody></table><h3 id="Maven构建生命周期"><a href="#Maven构建生命周期" class="headerlink" title="Maven构建生命周期"></a>Maven构建生命周期</h3><ol><li><p>Maven构建生命周期定义了一个项目构建跟发布的过程。</p><p>validate - complie - test - package - verify - install - deploy</p></li></ol><table><thead><tr><th>阶段</th><th>处理</th><th>描述</th></tr></thead><tbody><tr><td>验证 validate</td><td>验证项目</td><td>验证项目是否正确且所有必须信息是可用的</td></tr><tr><td>编译 compile</td><td>执行编译</td><td>源代码编译在此阶段完成</td></tr><tr><td>测试 Test</td><td>测试</td><td>使用适当的单元测试框架运行测试</td></tr><tr><td>包装 package</td><td>打包</td><td>创建JAP&#x2F;WAR包如在pom.xml中定义提及的包</td></tr><tr><td>检查 verify</td><td>检查</td><td>对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td>安装 install</td><td>安装</td><td>安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td>部署 deploy</td><td>部署</td><td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table><ol><li>为了完成default生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。</li><li>Maven有以下三个标准的生命周期<ul><li>clean：项目清理的处理</li><li>default（或build）：项目部署的处理</li><li>site：项目站点文档创建的处理</li></ul></li></ol><h4 id="Clean生命周期"><a href="#Clean生命周期" class="headerlink" title="Clean生命周期"></a>Clean生命周期</h4><ol><li><p>当我们执行 <code>mvn post-clean</code>命令时，Maven调用clean生命周期，它包含以下阶段：</p><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul></li><li><p>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被执行。即如果我们运行<code>mvn post-clean</code>，则运行以下三个生命周期阶段：<code>pre-clean</code>，<code>clean</code>，<code>post-clean</code></p></li></ol><h4 id="Site生命周期"><a href="#Site生命周期" class="headerlink" title="Site生命周期"></a>Site生命周期</h4><ol><li>Maven Site插件一般用来创建新的报告文档、部署站点等<ul><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ul></li></ol><h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><ol><li>Maven仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库；即在Maven的术语中，仓库是一个位置</li><li>在Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。Maven仓库能够帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR、ZIP、POM等等）的地方</li><li>Maven仓库有三种类型：<ul><li>本地（local）</li><li>中央（central）</li><li>远程（remote）</li></ul></li></ol><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><ol><li>Maven的本地仓库，在安装Maven后并不会创建，它是在第一次执行maven命令的时候才被创建</li><li>运行Maven的时候，maven所需要的任何构件都是直接从本地仓库获取的，如果本地仓库没有，它会先尝试从中央仓库下载构件至本地仓库，然后再使用本地仓库的构件</li></ol><h4 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h4><ol><li>Maven中央仓库是由Maven社区提供的仓库，其中包含了大量常用的库；不需要配置，需要通过网络才能访问</li></ol><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ol><li>如果Maven在中央仓库中也找不到依赖的文件，它会停止构建过程并输出错误信息到控制台，为避免这种情况，Maven提供了远程仓库的概念，它是开发人员自己定制的仓库，包含了所需要的代码库或者其他工程中用到的Jar文件</li></ol><h4 id="Maven依赖搜索顺序"><a href="#Maven依赖搜索顺序" class="headerlink" title="Maven依赖搜索顺序"></a>Maven依赖搜索顺序</h4><p>本地仓库 - 中央仓库 - 远程仓库</p><h3 id="Maven引入外部依赖"><a href="#Maven引入外部依赖" class="headerlink" title="Maven引入外部依赖"></a>Maven引入外部依赖</h3><ol><li>pom.xml的dependencies列表列出了我们的项目需要构建的所有外部依赖项</li><li>一般现在src文件夹下添加lib文件夹，然后将jar文件复制到此文件夹下，最后添加依赖到pom.xml文件中</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里添加你的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="comment">&lt;!-- 库名称，也可以自定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--库名称，也可以自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--作用域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Maven内置属性—**${basedir}**，就是获取项目根目录路径的一个属性。</li><li>常用的有<properties>元素可以使用自定义属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里定义一个my.version的属性在下面的地方可以直接$&#123;my.version&#125;引用这个属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">my.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx.xxxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;my.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven依赖传递"><a href="#Maven依赖传递" class="headerlink" title="Maven依赖传递"></a>Maven依赖传递</h3><h4 id="可传递性依赖发现"><a href="#可传递性依赖发现" class="headerlink" title="可传递性依赖发现"></a>可传递性依赖发现</h4><ol><li>如 A 依赖于其他库 B，另一个项目 C 想要使用 A，那么 C 项目也需要使用库 B</li><li>Maven可以避免去搜索所有所需库的需求，maven通过读取项目文件pom.xml，找出它们项目之间的依赖关系</li><li>通过这种依赖传递关系，可以使依赖关系树迅速增长到一个很大的量级，很有可能会出现依赖重复，依赖冲突等情况，Maven 针对这些情况提供了如下功能进行处理。</li></ol><table><thead><tr><th>功能</th><th>功能描述</th></tr></thead><tbody><tr><td>依赖调节</td><td>决定当多个手动创建的版本同时出现时，那个依赖版本将会被使用。如果两个依赖版本在依赖树里的深度是一样的时候，第一个被声明的依赖将会被使用</td></tr><tr><td>依赖管理</td><td>直接的指定手动创建的某个版本被使用。如当一个工程 C 在自己的依赖管理模块包含工程 B，即 B 依赖于 A，那么 A 即可制定在 B 被引用时所使用的版本</td></tr><tr><td>依赖范围</td><td>包含在构建过程每个阶段的依赖</td></tr><tr><td>依赖排除</td><td>任何可传递的依赖都可以通过“exclusion”元素被排除在外，如 A 依赖 B，B 依赖 C，因此 A 可以标记 C 为 被排除的</td></tr><tr><td>依赖可选</td><td>任何可传递的依赖可以被标记为可选的，通过使用“optional”元素，如 A 依赖 B，B 依赖 C，因此，B 可以标记 C 为可选的，这样 A 就可以不再使用 C</td></tr></tbody></table><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><ol><li>Maven在对项目进行编译、测试和运行时，会分别使用三套不同的classpath</li><li>可以在pom的依赖声明使用<code>scope</code>元素来控制依赖与三种classpath（编译classpath，测试classpath，运行classpath）之间的关系，这就是依赖范围</li></ol><p>Maven具有一下6种常见的依赖范围</p><table><thead><tr><th>compile</th><th>编译依赖范围，scope元素的缺省值。使用此依赖范围的Maven依赖，对于三种classpath均有效，及该Maven依赖在上述三种classpath均会被引入。</th></tr></thead><tbody><tr><td>test</td><td>测试依赖范围。使用此依赖范围的Maven依赖，支队测试classpath有效</td></tr><tr><td>provided</td><td>已提供依赖范围。使用此依赖范围的Mave依赖，只对编译classpath和测试classpath有效</td></tr><tr><td>runtime</td><td>运行时依赖范围。使用此依赖范围的Maven依赖，只对测试classpath和运行classpath有效</td></tr><tr><td>system</td><td>系统依赖范围，其效果与provided的依赖范围一致。其用于添加非Maven仓库的本地依赖，通过依赖元素dependency中的systemPath元素指定本地依赖的路径</td></tr><tr><td>import</td><td>导入依赖范围，该依赖范围只能与dependencyManagement元素配合使用，其功能是将pom.xml文件中dependencyManagement的配置导入合并到当前pom.xml的dependencymanagement中</td></tr></tbody></table><h5 id="依赖范围对传递依赖的影响"><a href="#依赖范围对传递依赖的影响" class="headerlink" title="依赖范围对传递依赖的影响"></a>依赖范围对传递依赖的影响</h5><ol><li>项目 A 依赖于项目 B，B 又依赖于项目 C，此时我们可以将 A 对于 B 的依赖称之为第一直接依赖，B 对于 C 的依赖称之为第二直接依赖。</li><li>传递性依赖的依赖范围受第一直接依赖和第二直接依赖的范围影响，如</li></ol><table><thead><tr><th></th><th>compile</th><th>test</th><th>provided</th><th>runtime</th></tr></thead><tbody><tr><td>compile</td><td>compile</td><td>-</td><td>-</td><td>runtime</td></tr><tr><td>test</td><td>test</td><td>-</td><td>-</td><td>test</td></tr><tr><td>provided</td><td>provided</td><td>-</td><td>provided</td><td>provided</td></tr><tr><td>runtime</td><td>runtime</td><td>-</td><td>-</td><td>runtime</td></tr></tbody></table><p>左边第一列表示第一直接依赖的依赖范围，上边第一行表示第二直接依赖的依赖范围</p><ol><li>通过上表，可以总结出以下规律：<ul><li>当第二直接依赖的范围是 compile 时，传递性依赖的范围与第一直接依赖的范围一致；</li><li>当第二直接依赖的范围是 test 时，传递性依赖不会被传递；</li><li>当第二直接依赖的范围是 provided 时，只传递第一直接依赖的范围也为 provided 的依赖，且传递性依赖的范围也为 provided；</li><li>当第二直接依赖的范围是 runtime 时，传递性依赖的范围与第一直接依赖的范围一致，但 compile 例外，此时传递性依赖的范围为 runtime。</li></ul></li></ol><h4 id="依赖调节"><a href="#依赖调节" class="headerlink" title="依赖调节"></a>依赖调节</h4><ol><li>当一个间接依赖存在多条引入路径时，为了避免出现依赖重复的问题，maven通过依赖调节来确定间接依赖的引入路径</li><li>依赖调节遵循以下两条原则：<ul><li>引入路径短者优先</li><li>先声明者优先</li></ul></li></ol><p>​        两条原则优先使用第一条原则使用</p><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><ol><li>假设存在这样的依赖关系，A 依赖于 B，B 依赖于 X，B 又依赖于 Y。B 实现了两个特性，其中一个特性依赖于 X，另一个特性依赖于 Y，且两个特性是互斥的关系，用户无法同时使用两个特性，所以 A 需要排除 X，此时就可以在 A 中将间接依赖 X 排除。</li><li>排除依赖是通过在 A 中使用exclusions元素实现的，该元素下可以包含若干个exclusion子元素，用于排除若干个间接依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置排除 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除依赖必须基于直接依赖中的间接依赖设置为可以依赖为 false --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置当前依赖中是否使用间接依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置具体排除--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>X<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>关于exclusions元素及排除依赖说明如下<ul><li>排除依赖是控制当前项目是否使用其直接依赖传递下来的间接依赖</li><li>exclusions元素下可以包含若干个exclusion子元素，用于排除若干个间接依赖</li><li>sxclusion元素用来设置具体排除的间接依赖，该元素包含两个字元素，groupid和artifactid，用来确定需要排除的间接依赖的坐标信息</li><li>exclusion元素中只需要设置froupid和artifactid就可以确定需要排除的依赖，无需指定版本version</li></ul></li></ol><h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><ol><li>设置可选依赖，在 B 中的pom关于 X 的依赖声明中使用optional元素，将其设置为可选依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>X<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置可选依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>关于optional元素及可选依赖说明<ul><li>可选依赖用来控制当前依赖是否向下传递成为间接依赖</li><li>optional默认值为false，表示可以向下传递成为间接依赖</li><li>若optional元素取值为true，则表示当前依赖不能向下传递成为间接依赖</li></ul></li></ol><h4 id="排除依赖-vs-可选依赖"><a href="#排除依赖-vs-可选依赖" class="headerlink" title="排除依赖 vs 可选依赖"></a>排除依赖 vs 可选依赖</h4><ol><li>排除依赖是控制当前项目是否使用其直接依赖传递下来的间接依赖</li><li>可选依赖是控制当前项目的依赖是否向下传递</li><li>可选依赖的优先级高于排除依赖</li><li>若对于同一个间接依赖同时使用排除依赖和可选依赖进行设置，那么可选依赖的取值必须为false，否则排除依赖无法生效</li></ol><h3 id="Maven继承"><a href="#Maven继承" class="headerlink" title="Maven继承"></a>Maven继承</h3><ol><li>当一个项目包含多个模块时，可以在该项目中创建一个父模块，并在其pom中声明依赖，其他模块的pom可通过继承父模块的pom来获得相关依赖的声明</li><li>对于父模块而言，其目的是为了消除子模块pom中的重复配置，其中不包含有任何实际代码，因此父模块pom的打包类型必须是pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>App-Core-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Root<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>可被继承的pom元素</p><blockquote><p>groupId:项目组ID,项目坐标的核心元素</p><p>version: 项目版本, 项目坐标的核心元素</p><p>description: 项目的描述信息</p><p>organization: 项目的组织信息</p><p>inceptionYear: 项目的创始年份</p><p>url: 项目的URL地址</p><p>developers: 项目开发者信息</p><p>contributors: 项目的贡献者信息</p><p>distributionManagement: 项目的部署配置</p><p>issueManagement: 项目的缺陷跟踪系统信息</p><p>ciManagement: 项目的持续集成系统信息</p><p>scm: 项目的版本控制系统信息</p><p>mailingLists: 项目的邮件列表信息</p><p>properties: 自定义的maven属性</p><p>dependencies: 项目的依赖配置</p><p>dependencyManagement: 项目的依赖管理配置</p><p>repositories: 项目的仓库配置</p><p>build: 包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</p><p>reporting: 包括项目的报告输出目录配置、报告插件配置等</p></blockquote></li></ol><h3 id="Maven依赖管理"><a href="#Maven依赖管理" class="headerlink" title="Maven依赖管理"></a>Maven依赖管理</h3><ol><li>Maven可以通过<code>dependencyManagement</code>元素对依赖进行管理，它具有以下2大特性：<ul><li>在该元素下声明的依赖不会实际引入到模块中，只有在dependencies元素下同样声明了该依赖，才会引入到模块中</li><li>该元素能够约束dependencies下依赖的使用，即dependencies声明的依赖若未指定版本，则使用dependencyManagement中指定的版本，否则将覆盖dependencymanagement中的版本</li></ul></li></ol><h4 id="继承依赖管理"><a href="#继承依赖管理" class="headerlink" title="继承依赖管理"></a>继承依赖管理</h4><ol><li>由于dependencyManagement元素是可以被继承的，因此我们可以在父模块pom中使用dependencyManagement元素声明所有子模块的依赖，然后在各个子模块pom使用dependencies元素声明实际用到的依赖即可，这样既可以让子模块能够继承父模块的依赖配置，还能避免将不必要的依赖引入到子模块中</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义的父类pom.xml 打包类型使pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一些 maven 变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system.version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">system.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.connector.version</span>&gt;</span>5.1.18<span class="tag">&lt;/<span class="name">mysql.connector.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c3p0.version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">c3p0.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dependencyManagement 标签用于控制子模块的依赖版本等信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该标签只用来控制版本，不能将依赖引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--引用的properties标签中定义的变量 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--引用的properties标签中定义的变量 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--引用的properties标签中定义的变量 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--引用的properties标签中定义的变量 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;c3p0.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在父模块Root中使用dependencyManagement元素声明的依赖，既不会给Root模块引入依赖，也不会给其子模块引入依赖，但这段配置是可以被继承的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>App-Data-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.biancheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在子模块中，所有在dependencies元素中声明的依赖都只配置了groupid和artifactid，省去了version和scope。之所以能够省去这些信息，是因为它们继承了父模块Root中dependencyManagement的配置，其完整的依赖声明已经包含在父模块的pom中，子模块只需要配置groupid和artifactid就能获得相应的依赖信息，从而引入正确的依赖</li></ul><ol><li>推荐使用的原因</li></ol><ul><li>在父模块中使用dependencyManagement声明依赖就能够统一项目内依赖的版本，子模块无需声明版本，也就不会出现多个子模块使用同一依赖项版本不一致的情况，降低依赖冲突的几率</li><li>dependencyManagement声明的依赖不会被实际引入，子模块需要什么依赖就自己引入，增加了灵活性，避免引入一些不必要的依赖</li></ul><h3 id="Maven聚合"><a href="#Maven聚合" class="headerlink" title="Maven聚合"></a>Maven聚合</h3><ol><li>在实际开发过程中，我们所接触的项目一般都有多个模块组成，在构建项目时，如果每次都按模块一个一个地进行构建会十分麻烦，可以采用Maven的聚合功能</li><li>使用Maven聚合功能对项目进行构建时，需要在该项目中额外创建一个聚合模块，然后通过这个模块构建整个项目的所有模块</li><li>聚合模块仅仅是帮助聚合其他模块的工具，其本身并无任何实质内容，因此聚合模块中只有一个pom文件</li><li>与父模块相似，聚合模块的打包方式（packaging）也是pom，用户可以在其pom中通过modules下的module子元素来添加需要聚合的模块的目录路径</li><li>聚合模块在构建时，Maven会先解析聚合模块的pom、分析需要构建的模块，并根据这些模块之间的关系计算出构建顺序，然后根据这个顺序依次构建各个模块</li></ol><h4 id="继承和聚合的关系"><a href="#继承和聚合的关系" class="headerlink" title="继承和聚合的关系"></a>继承和聚合的关系</h4><ol><li>在实际项目中，一个模块往往既是聚合模块又是其他项目的父模块</li><li>两者目的不同，继承是为了消除pom中的重复配置，聚合是为了方便快速的构建项目</li><li>对于继承中的父模块来说，它根本不知道哪些模块继承了它，但子模块都知道自己的父模块是谁</li><li>对于聚合模块来说，它知道哪些模块被聚合了，但那些聚合的模块根本不知道聚合模块的存在</li><li>两者在结构和形式上还是有一定的共同点，即两者的打包方式都是pom，两者除了pom外没有实际的代码内容</li></ol><h3 id="Maven版本号中Snapshot和Release的含义"><a href="#Maven版本号中Snapshot和Release的含义" class="headerlink" title="Maven版本号中Snapshot和Release的含义"></a>Maven版本号中Snapshot和Release的含义</h3><ol><li>一个仓库一般分为public（Release）仓和snapshot仓，前者存放正式版本，后者存放快照版本</li><li>两者区别在于本地获取依赖的机制不同：<ul><li>正式版本在构建的时候构建工具会先在本次仓库中查找是否已经有了这个依赖库，如果没有的话才会去远程仓库去拉取。而一般在第一次构建时构建工具都会把本地没有的从远程拉取到本地，所以之后如果再构建只会依赖到本地库，而无法获取最新的依赖</li><li>快照版本虽然构建时拉取依赖库的方式与正式版本一样，但可以配置其向远程仓库中查找的频率。频率有四种，分别是always，daily，interval和naver。当本地仓库中存在需要的依赖项目时，always是每次都去远程仓库查看是否有更新，daily是只在当天第一次查看是否有更新，当天的其他时间不会查看，interval允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次，never是不会去远程仓库中查找</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axjx详解</title>
      <link href="/2022/07/17/axjx%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/07/17/axjx%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Axjx的用法"><a href="#Axjx的用法" class="headerlink" title="Axjx的用法"></a>Axjx的用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#send&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">         $.<span class="title function_">ajax</span>(&#123;  </span><br><span class="line">             <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,  </span><br><span class="line">             <span class="attr">url</span>: <span class="string">&quot;test.json&quot;</span>,  </span><br><span class="line">             <span class="attr">data</span>: &#123;<span class="attr">username</span>:$(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(), <span class="attr">content</span>:$(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>()&#125;,  </span><br><span class="line">             <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,  </span><br><span class="line">             <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;  </span><br><span class="line">                         $(<span class="string">&#x27;#resText&#x27;</span>).<span class="title function_">empty</span>(); <span class="comment">//清空resText里面的所有内容 var html = &#x27;&#x27;;   </span></span><br><span class="line">                         $.<span class="title function_">each</span>(data, <span class="keyword">function</span>(<span class="params">commentIndex, comment</span>)&#123;  </span><br><span class="line">                               html += <span class="string">&#x27;&lt;div class=&quot;comment&quot;&gt;&lt;h6&gt;&#x27;</span> + comment[<span class="string">&#x27;username&#x27;</span>] + <span class="string">&#x27;:&lt;/h6&gt;&lt;p class=&quot;para&quot;&#x27;</span> + comment[<span class="string">&#x27;content&#x27;</span>] + <span class="string">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;  </span><br><span class="line">                         &#125;);  </span><br><span class="line">                         $(<span class="string">&#x27;#resText&#x27;</span>).<span class="title function_">html</span>(html);  </span><br><span class="line">                      &#125;  </span><br><span class="line">         &#125;);  </span><br><span class="line">    &#125;); </span><br></pre></td></tr></table></figure><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ol><li><p>url</p><ul><li>要求为String类型的参数，（默认为当前页地址）发送请求的地址</li></ul></li><li><p>type</p><ul><li><p>要求为String类型的参数，请求方式（post或get）默认为get</p></li><li><p>注意其他http请求方式，例如put和delete也可以使用，但仅部分浏览器支持；</p></li></ul></li><li><p>timeout</p><ul><li><p>要求为Number类型的参数，设置请求超时时间（毫秒）</p></li><li><p>此设置将覆盖<code>$.ajaxSetup()</code> 方法的全局设置</p></li></ul></li><li><p>async</p><ul><li><p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求</p></li><li><p>如果需要发送同步请求，请将此选项设为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行</p></li></ul></li><li><p>cache</p><ul><li>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）设置为false将不会从浏览器缓存中加载请求信息</li></ul></li><li><p>data</p><ul><li>要求为Object或String类型的参数，发送到服务器的数据</li><li>如果已经不是字符串，将自动转换为字符串格式，get请求中将附加到url后，防止这种自动转换，可以查看processData选项</li><li>对象必须为key&#x2F;value格式，例如{fo1:”br1”,fo2:”br2”}转换为&amp;fo1&#x3D;br1&amp;fo2&#x3D;br2</li><li>如果是数组，JQuery将自动为不同值对应同一个名称，例如{fo:[“br1”,”br2”]}转换为&amp;fo&#x3D;br1&amp;fo&#x3D;br2</li></ul></li><li><p>dataType</p><ul><li>要求为String类型的参数，预期服务器返回的数据类型</li><li>如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递，可用的参数类型如下：<ul><li>xml：返回XML文档，可用JQuery处理</li><li>html：返回纯文本HTML信息，包含的script标签会在插入DOM时执行</li><li>script：返回纯文本JavaScript代码，不会自动缓存结果，除非设置了cache参数，注意在远程请求时（不在同一个域下），所有的post请求都将转为get请求</li><li>json：返回JSON数据</li><li>jsonp：JSONP格式</li><li>text：返回纯文本字符串</li></ul></li></ul></li><li><p>beforeSend</p><ul><li><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头</p></li><li><p>在beforeSend中如果返回false可以取消本次ajax请求，XMLHttpQequest对象时唯一的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">XMLHttpRequest</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>; <span class="comment">//调用本次ajax请求时传递的options参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>complete</p><ul><li><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用），参数为XMLHttpRequest对象和一个描述成功请求类型的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>; <span class="comment">//调用本次ajax请求时传递的options参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>success</p><ul><li><p>要求为Function类型的参数，请求成功后调用的回调函数，有两个参数</p><ul><li>由服务器返回，并根据dataType参数进行处理后的数据</li><li>描述状态的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">data, textStatus</span>)&#123;</span><br><span class="line"><span class="comment">//data可能是xmlDoc、jsonObj、html、text等等</span></span><br><span class="line"><span class="variable language_">this</span>; <span class="comment">//调用本次ajax请求时传递的options参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>error</p><ul><li>要求为Function类型的参数，请求失败时被调用的函数，该函数有三个参数，即XMLHttpRequest对象、错误信息和捕获的错误对象（可选）。ajax事件函数如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)&#123;</span><br><span class="line"><span class="comment">//通常情况下textStatus和errorThrown只有其中一个包含信息</span></span><br><span class="line"><span class="variable language_">this</span>; <span class="comment">//调用本次ajax请求时传递的options参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>contentType</p><ul><li>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为<code>application/x-www-form-urlencoded</code> ，该默认值适合大多数应用场合</li></ul></li><li><p>dataFilter</p><ul><li>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。</li><li>提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">data, type</span>)&#123;</span><br><span class="line"><span class="comment">//返回处理后的数据</span></span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>global</p><ul><li>要求为Boolean类型的参数，默认为true，表示是否触发全局ajax事件</li><li>设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件</li></ul></li><li><p>jsonp</p><ul><li>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字</li><li>该值用来替代在”callback&#x3D;?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad&#x3D;?”传给服务器</li></ul></li><li><p>username</p><ul><li>要求为String类型的参数，用于响应HTTP访问认证请求的用户名</li></ul></li><li><p>password</p><ul><li>要求为String类型的参数，用于响应HTTP访问认证请求的密码</li></ul></li><li><p>processData</p><ul><li>要求为Boolean类型的参数，默认为true</li><li>默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application&#x2F;x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false</li></ul></li><li><p>scriptCharset</p><ul><li>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yaml语法学习</title>
      <link href="/2022/07/09/Yaml%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/09/Yaml%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key&#x3D;value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><h3 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h3><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>传统xml配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;port&gt;8081&lt;port&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure><p>yaml配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server：</span><br><span class="line">  prot: 8081</span><br></pre></td></tr></table></figure><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k: v</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#对象、Map格式</span><br><span class="line">k: </span><br><span class="line">    v1:</span><br><span class="line">    v2:</span><br></pre></td></tr></table></figure><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student:</span><br><span class="line">    name: yang</span><br><span class="line">    age: 11</span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student: &#123;name: yang,age: 11&#125;</span><br></pre></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pets:</span><br><span class="line"> - cat</span><br><span class="line"> - dog</span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pets: [cat,dog]</span><br></pre></td></tr></table></figure><h3 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h3><ol><li><p>在springboot项目中的resources目录下新建一个文件 application.yml</p></li><li><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p></li></ol>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">yang</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2022</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">狗</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>若要加载指定的配置文件，则在实体类上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:文件名.properties&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="注入对比"><a href="#注入对比" class="headerlink" title="注入对比"></a>注入对比</h3><table><thead><tr><th></th><th>@ConfiguratonProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>单独指定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SpEl</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p><p>2、松散绑定：即yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。</p><p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><h3 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#配置环境的名称</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-软件安装</title>
      <link href="/2022/07/07/Linux%E5%AD%A6%E4%B9%A0-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2022/07/07/Linux%E5%AD%A6%E4%B9%A0-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><h5 id="以jdk为例"><a href="#以jdk为例" class="headerlink" title="以jdk为例"></a>以jdk为例</h5><ol><li><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p></li><li><p>如果有安装过先卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@yang ~]# java -version</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"># 检查</span><br><span class="line">[root@yang ~]# rpm -qa|grep jdk</span><br><span class="line">jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"># 卸载 -e --nodeps 强制删除</span><br><span class="line">[root@yang ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line">[root@yang ~]# java -version</span><br><span class="line">-bash: /usr/bin/java: No such file or directory  # OK</span><br></pre></td></tr></table></figure></li><li><p>安装JDK</p><p>JDK 会被安装到 &#x2F;usr&#x2F;java 目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装java rpm</span><br><span class="line">[root@yang yang]# rpm -ivh jdk-8u221-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"># 安装完成后配置环境变量 文件：vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_221-amd64 #根据自己 /usr/java/ 目录更改</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line"># 保存退出</span><br><span class="line"></span><br><span class="line"># 让新增的环境变量生效！</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"># 测试 java -version</span><br><span class="line">[root@yang java]# java -version</span><br><span class="line">java version &quot;1.8.0_221&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure></li><li><p>安装完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME #查看 JAVA_HOME 是否配置成功</span><br><span class="line">echo $CLASSPATH #查看 CLASSPATH 是否配置成功</span><br><span class="line">echo $PATH #查看 PATH 是否配置成功</span><br></pre></td></tr></table></figure></li><li><p>卸载JDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep jdk #检查 JDK 版本信息</span><br><span class="line">rpm -e --nodeps JDK #删除 JDK</span><br></pre></td></tr></table></figure></li></ol><h3 id="解压缩安装"><a href="#解压缩安装" class="headerlink" title="解压缩安装"></a>解压缩安装</h3><p>以Tomcat安装为例</p><p>1、准备好Tomcat的安装包</p><p>2、将文件移动到&#x2F;usr&#x2F;tomcat&#x2F;下，并解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yang yang]# mv apache-tomcat-9.0.22.tar.gz /usr</span><br><span class="line">[root@yang yang]# cd /usr</span><br><span class="line">[root@yang usr]# ls</span><br><span class="line">apache-tomcat-9.0.22.tar.gz</span><br><span class="line">[root@yang usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压</span><br></pre></td></tr></table></figure><p>3、运行Tomcat，进入bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行：startup.sh --&gt;启动tomcat</span><br><span class="line"># 执行：shutdown.sh --&gt;关闭tomcat</span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><p>4、确保Linux的防火墙端口是开启的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 查看firewall服务状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"># 开启、重启、关闭、firewalld.service服务</span><br><span class="line"># 开启</span><br><span class="line">service firewalld start</span><br><span class="line"># 重启</span><br><span class="line">service firewalld restart</span><br><span class="line"># 关闭</span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"># 查看防火墙规则</span><br><span class="line">firewall-cmd --list-all    # 查看全部信息</span><br><span class="line">firewall-cmd --list-ports  # 只看端口信息</span><br><span class="line"></span><br><span class="line"># 开启端口</span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent   #永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><p>以Docker安装为例</p><ol><li><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></li><li><p>确定是CentOS7及以上版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 Desktop]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure></li><li><p>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"># 官网版本</span><br><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置stable镜像仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 错误</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">## 报错</span><br><span class="line">[Errno 14] curl#35 - TCP connection reset by peer</span><br><span class="line">[Errno 12] curl#35 - Timeout</span><br><span class="line"></span><br><span class="line"># 正确推荐使用国内的</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-vim</title>
      <link href="/2022/07/07/Linux%E5%AD%A6%E4%B9%A0-vim/"/>
      <url>/2022/07/07/Linux%E5%AD%A6%E4%B9%A0-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是vim"><a href="#什么是vim" class="headerlink" title="什么是vim"></a>什么是vim</h3><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富</p><h3 id="vi-x2F-vim的使用"><a href="#vi-x2F-vim的使用" class="headerlink" title="vi&#x2F;vim的使用"></a>vi&#x2F;vim的使用</h3><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong></p><h5 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h5><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h5 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按<code>ESC</code> 键可随时退出底线命令模式。</p><h3 id="vi-x2F-vim按键说明"><a href="#vi-x2F-vim按键说明" class="headerlink" title="vi&#x2F;vim按键说明"></a>vi&#x2F;vim按键说明</h3><h5 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h5><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td align="left">n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><h5 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h5><table><thead><tr><th align="left">搜索替换</th><th></th></tr></thead><tbody><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！(常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><h5 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h5><table><thead><tr><th align="left">删除、复制与粘贴</th><th></th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><h5 id="进入输入或取代的编辑模式"><a href="#进入输入或取代的编辑模式" class="headerlink" title="进入输入或取代的编辑模式"></a>进入输入或取代的编辑模式</h5><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a,A</td><td>进入输入模式(Insert mode)：<br/>a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o,O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r,R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h5 id="指令行的储存、离开等指令"><a href="#指令行的储存、离开等指令" class="headerlink" title="指令行的储存、离开等指令"></a>指令行的储存、离开等指令</h5><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux-vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-常用命令</title>
      <link href="/2022/07/06/Linux%E5%AD%A6%E4%B9%A0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/06/Linux%E5%AD%A6%E4%B9%A0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux文件基本属性"><a href="#Linux文件基本属性" class="headerlink" title="Linux文件基本属性"></a>Linux文件基本属性</h3><ol><li>chown（change owner）：修改所属用户和组</li><li>chmod（change mode）：修改用户的权限</li></ol><blockquote><p>drwxr-xr-x.  95 root root 12288 Jul  4 22:03 etc</p></blockquote><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p><ul><li>从左至右用0-9这些数字来表示</li><li>第<strong>0</strong>位确定文件类型，第<strong>1-3</strong>位确定属主（该文件的所有者）拥有该文件的权限，第<strong>4-6</strong>位确定属组（所有者的同组用户）拥有该文件的权限，第<strong>7-9</strong>位确定其他用户拥有该文件的权限</li><li>其中，第<strong>1、4、7</strong>位表示读权限，如果用<code>r</code> 字符表示，则有读权限，如果用<code>-</code> 字符表示，则没有读权限；第<strong>2、5、8</strong>位表示写权限，如果用<strong>w</strong>字符表示，则有写权限，如果用<code>w</code> 字符表示，则有写权限，如果用<code>-</code> 字符表示则没有写权限；第<strong>3、6、9</strong>位表示可执行权限，如果用<code>x</code> 字符表示，则有执行权限，如果用<code>-</code> 字符表示，则没有执行权限。</li></ul><h5 id="Linux文件属主和属组"><a href="#Linux文件属主和属组" class="headerlink" title="Linux文件属主和属组"></a>Linux文件属主和属组</h5><ol><li>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户</li><li>在linux系统中，用户是按组分类的，一个用户属于一个或多个组；文件所有者以外的用户又可以分为文件所属组的同组用户和其他用户；因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</li><li>在以上实例中，<code>etc</code> 文件是一个目录文件，属主和属组都是<code>root</code> ，属主有可读可写可执行的权限，与属主同组的其他用户有可读可执行的权限，其他用户有可读可执行的权限</li></ol><h5 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h5><h6 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h6><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>参数选项</p><ul><li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li></ul><h6 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h6><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h6 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h6><ol><li><p>Linux文件属性有两种设置方法，一种是数字，一种是符号</p></li><li><p>Linux文件的基本权限有9个，分别是 <strong>owner&#x2F;group&#x2F;others(拥有者&#x2F;组&#x2F;其他)</strong> 三种身份各有自己的 <strong>read&#x2F;write&#x2F;execute</strong> 权限。</p></li><li><p>九个权限每三个一组，其中，我们可以使用数字来表示各个权限，即</p><ul><li>r：4</li><li>w：2</li><li>x：1</li></ul></li><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure></li><li><p>选项与参数：</p><ul><li><strong>xyz</strong> : 就是刚刚提到的数字类型的权限属性，为 <strong>rwx</strong> 属性数值的相加。</li><li><strong>-R</strong> : 进行递归(recursive)的持续变更，以及连同次目录下的所有文件都会变更</li></ul></li></ol><h3 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h3><ol><li>绝对路径：由根目录<code>/</code> 写起</li><li>相对路径：不是由<code>/</code> 写起</li></ol><h5 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h5><p>可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp</p><h6 id="ls（list-files）：列出目录"><a href="#ls（list-files）：列出目录" class="headerlink" title="ls（list files）：列出目录"></a>ls（list files）：列出目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [-adl]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><h6 id="cd（change-directory）：切换目录"><a href="#cd（change-directory）：切换目录" class="headerlink" title="cd（change directory）：切换目录"></a>cd（change directory）：切换目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><h6 id="pwd（print-work-directory）：显示目前的目录"><a href="#pwd（print-work-directory）：显示目前的目录" class="headerlink" title="pwd（print work directory）：显示目前的目录"></a>pwd（print work directory）：显示目前的目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd [-P]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</li></ul><h6 id="mkdir（make-directory）：创建一个新的目录"><a href="#mkdir（make-directory）：创建一个新的目录" class="headerlink" title="mkdir（make directory）：创建一个新的目录"></a>mkdir（make directory）：创建一个新的目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：直接配置文件的权限！</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建</li></ul><h6 id="rmdir（删除一个空的目录）：删除一个空的目录"><a href="#rmdir（删除一个空的目录）：删除一个空的目录" class="headerlink" title="rmdir（删除一个空的目录）：删除一个空的目录"></a>rmdir（删除一个空的目录）：删除一个空的目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-P] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-P</strong> ：从该目录起，一次删除多级空目录</li></ul><h6 id="cp（copy-file）：复制文件或目录"><a href="#cp（copy-file）：复制文件或目录" class="headerlink" title="cp（copy file）：复制文件或目录"></a>cp（copy file）：复制文件或目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当于 -pdr 的意思，至于 pdr 请参考下列说明；(常用)</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><h6 id="rm（romove）：删除文件或目录"><a href="#rm（romove）：删除文件或目录" class="headerlink" title="rm（romove）：删除文件或目录"></a>rm（romove）：删除文件或目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><h6 id="mv（move-file）：移动文件与目录，或修改文件与目录的名称"><a href="#mv（move-file）：移动文件与目录，或修改文件与目录的名称" class="headerlink" title="mv（move file）：移动文件与目录，或修改文件与目录的名称"></a>mv（move file）：移动文件与目录，或修改文件与目录的名称</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [-fiu] source destination</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><h5 id="Linux文件内容查看"><a href="#Linux文件内容查看" class="headerlink" title="Linux文件内容查看"></a>Linux文件内容查看</h5><h6 id="cat-由第一行开始显示文件内容"><a href="#cat-由第一行开始显示文件内容" class="headerlink" title="cat  由第一行开始显示文件内容"></a>cat  由第一行开始显示文件内容</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><h6 id="tac-从最后一行开始显示"><a href="#tac-从最后一行开始显示" class="headerlink" title="tac  从最后一行开始显示"></a>tac  从最后一行开始显示</h6><p>参考<code>cat</code> 语法</p><h6 id="nl-显示的时候输出行号"><a href="#nl-显示的时候输出行号" class="headerlink" title="nl   显示的时候输出行号"></a>nl   显示的时候输出行号</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><h6 id="more-一页一页的显示文件内容"><a href="#more-一页一页的显示文件内容" class="headerlink" title="more 一页一页的显示文件内容"></a>more 一页一页的显示文件内容</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件</span><br></pre></td></tr></table></figure><p>在 more 这个程序的运行过程中，有几个按键可以按：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter     ：代表向下翻『一行』；</li><li>&#x2F;字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f      ：立刻显示出档名以及目前显示的行数；</li><li>q       ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><h6 id="less-与-more-类似，但是比-more-更好的是，他可以往前翻页"><a href="#less-与-more-类似，但是比-more-更好的是，他可以往前翻页" class="headerlink" title="less 与 more 类似，但是比 more 更好的是，他可以往前翻页"></a>less 与 more 类似，但是比 more 更好的是，他可以往前翻页</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 文件</span><br></pre></td></tr></table></figure><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>&#x2F;字串   ：向下搜寻『字串』的功能；</li><li>?字串   ：向上搜寻『字串』的功能；</li><li>n     ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N     ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q     ：离开 less 这个程序；</li></ul><h6 id="head-只看头几行"><a href="#head-只看头几行" class="headerlink" title="head 只看头几行"></a>head 只看头几行</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件 </span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><h6 id="tail-只看尾巴几行"><a href="#tail-只看尾巴几行" class="headerlink" title="tail 只看尾巴几行"></a>tail 只看尾巴几行</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 文件 </span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul><h3 id="Linux用户和用户组管理"><a href="#Linux用户和用户组管理" class="headerlink" title="Linux用户和用户组管理"></a>Linux用户和用户组管理</h3><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统；</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除和 修改</li><li>用户口令的管理</li><li>用户组的管理</li></ul><h5 id="Linux系统用户账号管理"><a href="#Linux系统用户账号管理" class="headerlink" title="Linux系统用户账号管理"></a>Linux系统用户账号管理</h5><p>添加用户账号就是在系统种创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源，刚添加的账号是被锁定的，无法使用。</p><h6 id="添加用户账号"><a href="#添加用户账号" class="headerlink" title="添加用户账号"></a>添加用户账号</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的登录名。</p></li></ul><h6 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><h6 id="修改用户账号"><a href="#修改用户账号" class="headerlink" title="修改用户账号"></a>修改用户账号</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：-l 新用户名</p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><h5 id="用户口令的管理"><a href="#用户口令的管理" class="headerlink" title="用户口令的管理"></a>用户口令的管理</h5><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令；</p><p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是yang，则下面的命令修改该用户自己的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:****** </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># passwd yang </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为用户指定空口令时，执行下列形式的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd -d yang</span><br></pre></td></tr></table></figure><p>将用户 yang的口令删除，这样用户 yang下一次登录时，系统就不再允许该用户登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd -l yang</span><br></pre></td></tr></table></figure><h5 id="Linux系统用户组的管理"><a href="#Linux系统用户组的管理" class="headerlink" title="Linux系统用户组的管理"></a>Linux系统用户组的管理</h5><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理，不同Linux系统对用户组的规定有所不同；</p><p>用户组的管理涉及用户组的添加、删除和修改，实际上就是对<code>/etc/group</code> 文件的更新；</p><h6 id="增加一个新的用户组"><a href="#增加一个新的用户组" class="headerlink" title="增加一个新的用户组"></a>增加一个新的用户组</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h6 id="删除一个已有的用户组"><a href="#删除一个已有的用户组" class="headerlink" title="删除一个已有的用户组"></a>删除一个已有的用户组</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><h6 id="修改用户组属性"><a href="#修改用户组属性" class="headerlink" title="修改用户组属性"></a>修改用户组属性</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>Linux 磁盘管理常用三个命令为 <strong>df</strong>、<strong>du</strong> 和 <strong>fdisk</strong>。</p><ul><li><strong>df</strong>（英文全称：disk free）：列出文件系统的整体磁盘使用量</li><li><strong>du</strong>（英文全称：disk used）：检查磁盘空间使用量</li></ul><h5 id="df"><a href="#df" class="headerlink" title="df"></a>df</h5><p>检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><h5 id="du"><a href="#du" class="headerlink" title="du"></a>du</h5><p>查看使用空间</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-系统目录结构</title>
      <link href="/2022/07/05/Linux%E5%AD%A6%E4%B9%A0-%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2022/07/05/Linux%E5%AD%A6%E4%B9%A0-%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux系统启动过程"><a href="#Linux系统启动过程" class="headerlink" title="Linux系统启动过程"></a>Linux系统启动过程</h3><ol><li>内核的引导</li><li>运行 init</li><li>系统初始化</li><li>建立终端 </li><li>用户登录系统<ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul></li></ol><blockquote><p>init程序的类型：</p><ul><li><strong>SysV:</strong> init, CentOS 5之前, 配置文件： &#x2F;etc&#x2F;inittab。</li><li><strong>Upstart:</strong> init,CentOS 6, 配置文件： &#x2F;etc&#x2F;inittab, &#x2F;etc&#x2F;init&#x2F;*.conf。</li><li><strong>Systemd：</strong> systemd, CentOS 7,配置文件： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system、 &#x2F;etc&#x2F;systemd&#x2F;system。</li></ul></blockquote><h3 id="Linux关机"><a href="#Linux关机" class="headerlink" title="Linux关机"></a>Linux关机</h3><p>关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sync 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span><br><span class="line"></span><br><span class="line">shutdown –h now 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> , 重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p><h3 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux目录结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int和Integer比较</title>
      <link href="/2022/06/02/int%E5%92%8CInteger%E6%AF%94%E8%BE%83/"/>
      <url>/2022/06/02/int%E5%92%8CInteger%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h5 id="int和Integer比较"><a href="#int和Integer比较" class="headerlink" title="int和Integer比较"></a>int和Integer比较</h5><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ol><li>Integer是int的包装类，int则是java的一种基本数据类型</li><li>Integer变量必须实例化后才能使用，而int变量不需要</li><li>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值</li><li>Integer的默认值是null，int的默认值是0</li></ol><h5 id="两个Integer变量比较"><a href="#两个Integer变量比较" class="headerlink" title="两个Integer变量比较"></a>两个Integer变量比较</h5><p>由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是<code>false</code></p><p>因为new生成的是两个对象，其内存地址不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">88</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">88</span>);</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="Integer变量和int变量比较"><a href="#Integer变量和int变量比较" class="headerlink" title="Integer变量和int变量比较"></a>Integer变量和int变量比较</h5><p>Integer变量和int变量比较时，只要两个变量的值是相等的，则结果为<code>true</code></p><p>因为包装类Integer和基本数据类型int比较时，java会自动拆箱为int，然后进行比较，实际上就变为两个int变量的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">88</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="非new生成的Integer变量和new-Integer-生成的变量比较"><a href="#非new生成的Integer变量和new-Integer-生成的变量比较" class="headerlink" title="非new生成的Integer变量和new Integer()生成的变量比较"></a>非new生成的Integer变量和new Integer()生成的变量比较</h5><p>非new生成的Integer变量和new Integer()生成的变量比较时，结果为<code>false</code>。</p><p>因为非new生成的Integer变量指向的是Java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中过的地址不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">88</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="两个非new生成的Integer对象比较"><a href="#两个非new生成的Integer对象比较" class="headerlink" title="两个非new生成的Integer对象比较"></a>两个非new生成的Integer对象比较</h5><p>对于两个非new生成的Integer对象，进行比较时</p><p>如果两个变量的值在区间-128到127之间，则比较结果为<code>true</code></p><p>如果两个变量的值不在此区间，则比较结果为<code>false</code></p><p>因为Integer的缓存机制会对-128到127的数进行缓存，若下次整形变量赋值为-128到127之间则会直接从缓存中取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger的使用</title>
      <link href="/2022/05/26/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/26/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Swagger的使用"><a href="#Swagger的使用" class="headerlink" title="Swagger的使用"></a>Swagger的使用</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ol><li><p>swagger是一款可以根据resutful风格生成的生成的接口开发文档，并且支持做测试的一款中间软件。</p></li><li><p>目标是使客户端和文件系统作为服务器以同样的速度来更新文件的方法,参数和模型紧密集成到服务器。</p></li></ol><h5 id="为什么要使用Swagger"><a href="#为什么要使用Swagger" class="headerlink" title="为什么要使用Swagger"></a>为什么要使用Swagger</h5><ol><li>对于后端开发人员来说<ul><li>不用再手写接口拼大量的参数，避免手写错误</li><li>对代码侵入性低，采用全注解的方式，开发简单</li><li>方法参数名修改、增加、减少参数都可以直接生效，不用手动维护</li><li>缺点：增加了开发成本，写接口还得再写一套参数配置</li></ul></li><li>对于前端开发来说<ul><li>后端只需要定义好接口，会自动生成文档，接口功能、参数一目了然</li><li>联调方便，如果出问题，直接测试接口，实时检查参数和返回值,就可以快速定位是前端还是后端的问题</li></ul></li></ol><h5 id="搭建一个Swagger"><a href="#搭建一个Swagger" class="headerlink" title="搭建一个Swagger"></a>搭建一个Swagger</h5><ol><li><p>引入Swagger的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入swagger--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>SpringBoot整合Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">productApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))  <span class="comment">//添加ApiOperiation注解的被扫描</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>().title(<span class="string">&quot;swagger和springBoot整合&quot;</span>).description(<span class="string">&quot;swagger的API文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="在项目中集成Swagger"><a href="#在项目中集成Swagger" class="headerlink" title="在项目中集成Swagger"></a>在项目中集成Swagger</h5><ol><li><p>在controller中使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value = &quot;测试Controller&quot;, tags = &#123; &quot;测试访问接口&quot; &#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;添加一个学生信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addFilm&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(value = &#123; @ApiResponse(code = 1000, message = &quot;成功&quot;), </span></span><br><span class="line"><span class="meta">                            @ApiResponse(code = 1001, message = &quot;失败&quot;),</span></span><br><span class="line"><span class="meta">                            @ApiResponse(code = 1002, response = Test.class,message = &quot;缺少参数&quot;) &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addFilm</span><span class="params">(<span class="meta">@ApiParam(&quot;发起者姓名&quot;)</span> <span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,</span></span><br><span class="line"><span class="params">                  <span class="meta">@ApiParam(value = &quot;分数&quot;, allowEmptyValue = true)</span> <span class="meta">@RequestParam(&quot;score&quot;)</span> Short score,</span></span><br><span class="line"><span class="params">                  <span class="meta">@ApiParam(&quot;发布时间&quot;)</span> <span class="meta">@RequestParam(value = &quot;publishTime&quot;,required = false)</span> String publishTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问本地链接</p><blockquote><p><a href="http://localhost:8080/swagger-ui.html#/">http://localhost:8080/swagger-ui.html#/</a></p></blockquote></li></ol><h5 id="使用Swagger需要注意的问题"><a href="#使用Swagger需要注意的问题" class="headerlink" title="使用Swagger需要注意的问题"></a>使用Swagger需要注意的问题</h5><ol><li>对于只有一个HttpServletRequest参数的方法，如果参数小于5个，推荐使用 @ApiImplicitParams的方式单独封装每一个参数；如果参数大于5个，采用定义一个对象去封装所有参数的属性，然后使用@APiParam的方式</li><li>默认的访问地址：ip:port&#x2F;swagger-ui.html#&#x2F;，但是在shiro中，会拦截所有的请求，必须加上默认访问路径（比如项目中，就是ip:port&#x2F;context&#x2F;swagger-ui.html#&#x2F;），然后登陆后才可以看到</li><li>在GET请求中，参数在Body体里面,不能使用@RequestBody。在POST请求，可以使用@RequestBody和@RequestParam，如果使用@RequestBody，对于参数转化的配置必须统一</li><li>controller必须指定请求类型，否则swagger会把所有的类型(6种)都生成出来</li><li>swagger在生产环境不能对外暴露,可以使用@Profile({“dev”, “prod”,“pre”})指定可以使用的环境</li></ol><h5 id="Swagger常用注解使用详解"><a href="#Swagger常用注解使用详解" class="headerlink" title="Swagger常用注解使用详解"></a>Swagger常用注解使用详解</h5><ol><li><p>Api</p><blockquote><p>@Api 用在类上，说明该类的作用。可以标记一个 Controller 类作为 Swagger 文档资源，使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&#123;&quot;用户接口&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tags：接口说明，可以在页面中显示。可以配置多个，当配置多个的时候，在页面中会显示多个接口的信息。</p></li><li><p>ApiModel</p><blockquote><p>@ApiModel 用在类上，表示对类进行说明，用于实体类中的参数接收说明。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = &quot;com.yang.param.AddUserParam&quot;, description = &quot;新增用户参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddUserParam</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiModelProperty</p><blockquote><p>@ApiModelProperty() 用于字段，表示对 model 属性的说明。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;com.biancheng.auth.param.AddUserParam&quot;, description = &quot;新增用户参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddUserParam</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiParam</p><blockquote><p>@ApiParam 用于 Controller 中方法的参数说明。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserDto <span class="title function_">addUser</span><span class="params">(<span class="meta">@ApiParam(value = &quot;新增用户参数&quot;, required = true)</span> <span class="meta">@RequestBody</span> AddUserParam param)</span> &#123;</span><br><span class="line">    System.err.println(param.getName());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDto</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>value：参数说明</li><li>required：是否必填</li></ul></li><li><p>ApiOperation</p><blockquote><p>@ApiOperation 用在 Controller 里的方法上，说明方法的作用，每一个接口的定义。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value=&quot;新增用户&quot;, notes=&quot;详细描述&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserDto <span class="title function_">addUser</span><span class="params">(<span class="meta">@ApiParam(value = &quot;新增用户参数&quot;, required = true)</span> <span class="meta">@RequestBody</span> AddUserParam param)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>value：接口名称</li><li>notes：详细说明</li></ul></li><li><p>ApiResponse 和 ApiResponses</p><blockquote><p>@ApiResponse 用于方法上，说明接口响应的一些信息；</p><p>@ApiResponses 组装了多个 @ApiResponse。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses(value = &#123; @ApiResponse(code = 1000, message = &quot;成功&quot;), </span></span><br><span class="line"><span class="meta">                        @ApiResponse(code = 1001, message = &quot;失败&quot;),</span></span><br><span class="line"><span class="meta">                        @ApiResponse(code = 1002, response = Test.class,message = &quot;缺少参数&quot;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addFilm</span><span class="params">(<span class="meta">@ApiParam(&quot;发起者姓名&quot;)</span> <span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,</span></span><br><span class="line"><span class="params">              <span class="meta">@ApiParam(value = &quot;分数&quot;, allowEmptyValue = true)</span> <span class="meta">@RequestParam(&quot;score&quot;)</span> Short score,</span></span><br><span class="line"><span class="params">              <span class="meta">@ApiParam(&quot;发布时间&quot;)</span> <span class="meta">@RequestParam(value = &quot;publishTime&quot;,required = false)</span> String publishTime)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiImplicitParam 和 ApiImplicitParams</p><blockquote><p>用于方法上，为单独的请求参数进行说明。使用方式代码如下所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, dataType = &quot;string&quot;, paramType = &quot;query&quot;, required = true, defaultValue = &quot;1&quot;) &#125;)</span></span><br><span class="line"><span class="meta">@ApiResponses(&#123; @ApiResponse(code = 200, message = &quot;OK&quot;, response = UserDto.class) &#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserDto <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDto</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name：参数名，对应方法中单独的参数名称。</li><li>value：参数中文说明。</li><li>required：是否必填。</li><li>paramType：参数类型，取值为 path、query、body、header、form。</li><li>dataType：参数数据类型。</li><li>defaultValue：默认值。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试与接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Redis代码</title>
      <link href="/2022/05/21/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/05/21/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h5 id="SpringBoot整合Redis代码"><a href="#SpringBoot整合Redis代码" class="headerlink" title="SpringBoot整合Redis代码"></a>SpringBoot整合Redis代码</h5><ol><li><p>在pom.xml 增加依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>资源文件application.yml中增加Redis相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Redis 配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">## Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment">## Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">## Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment">## 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="comment">#spring.redis.pool.max-active=8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="comment">#spring.redis.pool.max-wait=-1</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment">## 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="comment">#spring.redis.pool.max-idle=8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">## 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="comment">#spring.redis.pool.min-idle=0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment">## 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1200</span></span><br></pre></td></tr></table></figure></li></ol><p><em><strong>此时测试</strong></em></p><h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;yang&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// yang</span></span><br></pre></td></tr></table></figure><p><em>虽然在idea控制台输出正常，但在redis客户端中保存的key值出现乱码</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;\xac\xed\x00\x05t\x00\x04name&quot;</span><br></pre></td></tr></table></figure><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><p>自定义<code>RedisConfig</code>类，定义自己的<code>RedisTemplate</code></p><h5 id="自定义RedisConfig类"><a href="#自定义RedisConfig类" class="headerlink" title="自定义RedisConfig类"></a>自定义RedisConfig类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Redis使用FastJson序列化"><a href="#Redis使用FastJson序列化" class="headerlink" title="Redis使用FastJson序列化"></a>Redis使用FastJson序列化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义Redis工具类"><a href="#自定义Redis工具类" class="headerlink" title="自定义Redis工具类"></a>自定义Redis工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.expire(key, timeout, unit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.delete(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="type">return</span> <span class="variable">count</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h5><ol><li><p>编写User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>导入lombok依赖</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;yang&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(redisCache.getCacheObject(<span class="string">&quot;user&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// User(name=yang, age=1)</span></span><br></pre></td></tr></table></figure></li><li><p>redis客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;user&quot;</span><br><span class="line">127.0.0.1:6379&gt; get user</span><br><span class="line">&quot;&#123;\&quot;@type\&quot;:\&quot;com.example.redisdemo.pojo.User\&quot;,\&quot;age\&quot;:1,\&quot;name\&quot;:\&quot;yang\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java实现Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis缓存穿透和雪崩</title>
      <link href="/2022/05/21/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/"/>
      <url>/2022/05/21/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>如果每次都去查一个“缓存和数据库中都必不存在的数据（如id&#x3D;-1的数据）”，因为缓存中不存在，那么每次请求都会打到DB上，从而导致缓存失去意义，在高并发的情况下就可能导致数据库崩溃，这就是缓存穿透。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li><p>规范key过滤</p><p>规范key的命名，并且统一缓存查询的入口，在入口处对key的命名格式进行检测，过滤掉不规范key的访问，这样可以过滤掉大部分的恶意攻击。如约定项目中Redis缓存key的前缀都是以”公司名_项目名_REDIS_”开头，不符合这个约定的key在一开始就过滤掉。</p></li><li><p>缓存空值</p><p>简单粗暴，如果查询DB返回的数据为空，我们仍然把这个空值放到Redis缓存中，只是将它的过期时间设置的很短，另外为了避免不必要的内存消耗，可以定期清理空值的key。</p></li><li><p>加锁</p><p>根据key从缓存中获取到的value为空时，先锁上，再去查DB将数据加载到缓存，若其它线程获取锁失败，则等待一段时间后重试，从而避免了大量请求直接打到DB。单机可以使用synchronized或ReentrantLock加锁，分布式环境需要加分布式锁，如Redis分布式锁。</p></li><li><p>布隆过滤器</p><blockquote><p>我们想这样一个问题，如果想判断某个元素是不是在一个集合里，一般做法是将集合中所有的元素保存起来，然后通过比较确定，比如HashMap。但是随着集合中元素的增加，数据量超大时，我们需要的存储空间也越来越大，甚至超过服务器内存，这时我们就不能再用HashMap等数据结构了。</p></blockquote><ul><li><p>这时布隆过滤器就出场了，它的空间效率非常好，它是一个二进制向量，每一位存放的是0或1，<strong>初始时默认为0</strong></p></li><li><p>当一个元素加入集合时，通过 K 个 Hash 函数将这个元素映射成 k 个值 ：K1、K2、K3…，把向量中下标为K1、K2、K3…的位置置为1 。</p></li><li><p>因为布隆过滤器根本没有存放完整的数据，只是运用一系列随机映射函数计算出位置，然后填充二进制向量，所以它的空间效率非常好。</p></li></ul><p><em>有一个元素Y，怎么判断Y在布隆过滤器中是否存在</em></p><ul><li>同样将Y作为参数，通过3个hash函数的计算，分别得到3个值，比如是：4&#x2F;6&#x2F;8，我们只要看下标为4&#x2F;6&#x2F;8的位置是不是都是1</li><li>如果都是1，则元素Y可能存在于集合中，为什么说可能呢——hash碰撞，不同的两个元素，经过同样的hash函数，计算出来的值，从概率上来讲是有可能重复的。所以这也是布隆过滤器最大的缺点，存在误判率。</li><li>如果不全是1，则元素Y肯定不存在。</li><li>即当它说某个 key 不存在时，key一定不存在；当它说某个 key 存在时，key 可能存在。</li></ul><p><em>预先将所有缓存数据的key存放到布隆过滤器中，当一个查询请求过来的时候，先判断这个key在布隆过滤器中是否存在？</em></p><ul><li>如果不存在，直接返回提示，都不用去查缓存更不用说DB了</li><li>如果存在，则去查缓存，但我们知道布隆过滤器判断存在有一定的误判率，这里我是这样理解的，如果这个误判率针对你们的业务场景是可被接受的则可以忽略，另外我们在用Guava实现布隆过滤器的时候可以指定误判率不超过多少，你可以指定一个可被你接受的值。再或者，因为布隆过滤器可以过滤掉绝大多数的恶意key，针对少部分的漏网之鱼，我们可以在缓存层面使用功能上面说过的缓存空值或加锁的方案。</li></ul></li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p><em><strong>某个访问非常频繁，访问量非常大的一个缓存key，我们叫做热点key。</strong></em></p><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>缓存击穿是指某个热点key在失效的瞬间（一般是缓存时间到期），持续的大并发请求穿破缓存，直接打到数据库，就像在一个屏幕上凿开一个洞，造成数据库压力瞬间增大，这就是缓存击穿。</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li>设置热点key永不过期</li><li>加锁，根据热点key从缓存中获取到的value为空时，先锁上，再去查DB将数据加载到缓存，若其它线程获取锁失败，则等待一段时间后重试，从而避免了大量请求直接打到DB。单机可以使用synchronized或ReentrantLock，分布式需要加分布式锁，如Redis分布式锁。<code>为了不阻塞对其他key的请求，此处可以用热点key来加锁</code></li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><p>缓存雪崩是指缓存由于某些原因整体或者大量失效，导致大量请求打到后端数据库，从而导致数据库崩溃，整个系统崩溃，发生灾难。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><ol><li>缓存服务宕机，入Redis集群彻底崩溃</li><li>在某个集中的时间段内，系统预加载的缓存集中失效了</li></ol><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li>保证缓存层服务高可用性，如使用Redis Sentinel 和 Redis Cluster，双机房部署，保证Redis服务高可用。</li><li>通过设置不同的过期时间，来错开缓存过期，从而避免缓存集中失效</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis缓存穿透和雪崩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从复制及哨兵模式</title>
      <link href="/2022/05/20/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/05/20/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ol><li>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower)；<em>数据的复制是单向的</em>，只能由主节点到从节点。Master以写为主，Slave 以读为主。</li><li>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</li><li>一般为一主二从，搭配哨兵模式</li></ol><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量,</li><li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的，原因如下</p><ol><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li><li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</li><li>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。对于这种场景，就要使用主从复制。</li></ol><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><p><em>只配置从库，不用配置主库</em></p><ol><li><p>复制3个配置文件，然后修改对应的信息</p><ul><li>端口</li><li>pid名字</li><li>log文件名字</li><li>dump.rdb名字</li></ul></li><li><p>一主二从</p><blockquote><p>127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379   # SLAVEOF host 端口</p></blockquote><p><em>查看配置信息</em></p><blockquote><p>info replication</p></blockquote></li><li><p>若要永久有效，则应该在配置文件中配置</p></li></ol><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><ol><li>主机可以写，从机不能写只能读，主机中所有信息和数据，都会自动被从机保存。</li><li>主机断开连接，从机依旧可连接到主机，但没有写操作；若主机重新连接，从机依旧可以获取到主机写的信息。</li></ol><h5 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h5><ol><li>Slave 启动成功连接到master后会发送一个sync同步命令，Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步</li><li>但是只要是重新连接master，一次完全同步（全量复制)将被自动执行</li></ol><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><ol><li><p>主从切换技术的方法是︰当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel (哨兵）架构来解决这个问题。</p></li><li><p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p></li><li><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p></li><li><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p><em><strong>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</strong></em></p><p><em><strong>最简单的为三个哨兵，一个主节点，两个从节点</strong></em></p></li><li><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行fallover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p></li></ol><h5 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h5><ol><li><p>配置哨兵配置文件 sentinel.conf</p><blockquote><p>#sentinel monitor 被监控的名称 host port 1</p><p>sentinel monitor myredis 127.0.0.1 6379 1</p></blockquote><p>后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机 !</p></li><li><p>启动哨兵</p></li></ol><h5 id="哨兵模式-1"><a href="#哨兵模式-1" class="headerlink" title="哨兵模式"></a>哨兵模式</h5><p><em>如果宕机后的主机重新连接后，只能归并到新的主机下，当作从机</em></p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ol><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol><li>Redis 不好啊在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis哨兵模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis发布订阅</title>
      <link href="/2022/05/20/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/2022/05/20/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h5 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h5><ol><li>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</li><li>Redis 客户端可以订阅任意数量的频道。</li></ol><h5 id="发布订阅命令"><a href="#发布订阅命令" class="headerlink" title="发布订阅命令"></a>发布订阅命令</h5><h6 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h6><p><em>用于订阅给定的一个或多个频道的信息</em></p><blockquote><p>redis 127.0.0.1:6379&gt; SUBSCRIBE channel [channel …]</p></blockquote><p>返回值：接收到的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe yang</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure><h6 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h6><p><em>用于将信息发送到指定的频道</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUBLISH channel message</p></blockquote><p>返回值：接收到信息的订阅者数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish yang hello  # 发布信息</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h6 id="unsubcribe"><a href="#unsubcribe" class="headerlink" title="unsubcribe"></a>unsubcribe</h6><p><em>用于订阅给定的一个或多个频道的信息</em></p><blockquote><p>redis 127.0.0.1:6379&gt; UNSUBSCRIBE channel [channel …]</p></blockquote><p>返回值：在不同的客户端有不同的表现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; unsubscribe yang</span><br><span class="line">1) &quot;unsubscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 0</span><br></pre></td></tr></table></figure><h6 id="pubsub"><a href="#pubsub" class="headerlink" title="pubsub"></a>pubsub</h6><p><em>用于查看订阅与发布系统状态，它由数个不同规格的子命令组成</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUBSUB <subcommand> [argument [argument …]]</p></blockquote><p>返回值：由活跃频道组成的列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBSUB CHANNELS</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><h6 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h6><p><em>订阅一个或多个符合给定模式的频道</em></p><blockquote><p>每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类。</p></blockquote><blockquote><p>redis 127.0.0.1:6379&gt; PSUBSCRIBE pattern [pattern …]</p></blockquote><p>返回值：接收到的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PSUBSCRIBE mychannel</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;mychannel&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h6 id="punsubscribe"><a href="#punsubscribe" class="headerlink" title="punsubscribe"></a>punsubscribe</h6><p><em>用于退订所有给定模式的频道</em></p><blockquote><p>redis 127.0.0.1:6379&gt; PUNSUBSCRIBE [pattern [pattern …]]</p></blockquote><p>返回值：在不同客户端有不同表现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUNSUBSCRIBE mychannel </span><br><span class="line">1) &quot;punsubscribe&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><em>需要开启两个 redis-cli 客户端。</em></p><p><em><strong>创建可订阅频道名为 yang</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 第一个客户端</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; subscribe yang</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;yang&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第二个客户端</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; publish yang hello  # 发布信息</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ol><li>Redis是使用C实现的，通过分析Redis源码里的pubsub.c文件，了解发布和订阅机制的底层原理实现</li><li>通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端，SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。</li><li>通过PUBLISH命令向 订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</li><li>Pub&#x2F;Sub从字面上理解就是发布和订阅，在Redis中，你可以设定对某一个key值进行了消息发布后，所有订阅它的客户端都会收到相应的消息，这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis发布订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jedis</title>
      <link href="/2022/05/18/Jedis/"/>
      <url>/2022/05/18/Jedis/</url>
      
        <content type="html"><![CDATA[<h5 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h5><ol><li>jedis就是基于java语言的redis客户端，集成了redis的命令操作，提供了连接池管理。</li><li>redis-cli是redis官方提供的客户端，可以看作一个shell程序，它可以发送命令对redis进行操作。</li><li>对于jedis同理是使用java语言操作redis，双方都遵循redis提供的协议，按照协议开发对应的客户端。</li></ol><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="连接方式对比"><a href="#连接方式对比" class="headerlink" title="连接方式对比"></a>连接方式对比</h5><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直连</td><td>1. 简单方便<br />2. 适用于少量长期连接的场景</td><td>1. 存在每次新建&#x2F;关闭TCP开销<br />2. 资源无法控制，存在连接泄露的可能<br />3. Jedis对象线程不安全</td></tr><tr><td>连接池</td><td>1. Jedis预先生成，降低开销使用<br />2.连接池的形式保护和控制资源的使用</td><td>1. 相对于直连，使用相对于麻烦，<br />尤其在资源的管理上需要很多参数来保证，<br />一旦规划不合理就会出现问题</td></tr></tbody></table><h5 id="Jedis直连"><a href="#Jedis直连" class="headerlink" title="Jedis直连"></a>Jedis直连</h5><p><em>Jedis直连，本质是定义一个TCP连接，然后使用<code>socket</code>技术进行通信</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1.生成一个jedis对象，这个对象负责和指定Redis节点进行通信</span><br><span class="line">Jedis jedis = new Jedis(&quot;127.0.0.1&quot;, 6379);</span><br><span class="line"># 带密码需要执行认证方法</span><br><span class="line"># jedis.auth(&quot;123456&quot;);</span><br><span class="line"># 2.jedis执行set操作</span><br><span class="line">jedis.set(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line"># 3.jedis执行get操作，value=&quot;world&quot;</span><br><span class="line">String value = jedis.get(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><h5 id="Jdeis简单使用"><a href="#Jdeis简单使用" class="headerlink" title="Jdeis简单使用"></a>Jdeis简单使用</h5><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> #  1.string</span><br><span class="line"># 输出结果: OK</span><br><span class="line">jedis.set(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line"># 输出结果: world</span><br><span class="line">jedis.get(&quot;hello&quot;);</span><br><span class="line"># 输出结果:1</span><br><span class="line">jedis.incr(&quot;counter&quot;);</span><br></pre></td></tr></table></figure><h6 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  2.hash</span><br><span class="line">jedis.hset(&quot;myhash&quot;, &quot;f1&quot;, &quot;v1&quot;);</span><br><span class="line">jedis.hset(&quot;myhash&quot;, &quot;f2&quot;, &quot;v2&quot;);</span><br><span class="line"># 输出结果 : &#123;f1=v1, f2=v2&#125;</span><br><span class="line">jedis.hgetAll(&quot;myhash&quot;);</span><br></pre></td></tr></table></figure><h6 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  3.list</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;1&quot;);</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;2&quot;);</span><br><span class="line">jedis.rpush(&quot;mylist&quot;, &quot;3&quot;);</span><br><span class="line"># 输出结果 : [1, 2, 3]</span><br><span class="line">jedis.lrange(&quot;mylist&quot;, 0, -1);</span><br></pre></td></tr></table></figure><h6 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  4.set</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;a&quot;);</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;b&quot;);</span><br><span class="line">jedis.sadd(&quot; myset&quot;, &quot;a&quot;);</span><br><span class="line"># 输出结果 : [b, a]</span><br><span class="line">jedis.smembers(&quot;myset&quot;);</span><br></pre></td></tr></table></figure><h6 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  5.zset</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 99, &quot;tom&quot;);</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 66, &quot;peter&quot;);</span><br><span class="line">jedis.zadd(&quot;myzset&quot;, 33, &quot;james&quot;);</span><br><span class="line"># 输出结果 : [[[&quot;james&quot;],33.0], [[&quot;peter&quot;],66.0], [[&quot;tom&quot;],99.0]]</span><br><span class="line">jedis.zrangeWithScores(&quot;myzset&quot;, 0, -1);</span><br></pre></td></tr></table></figure><h5 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h5><ol><li>Jedis直连是每次操作创建一个jedis对象，执行完毕后关闭连接，对应的就是一次TCP连接。</li><li>Jedis连接池是预先生成一批Jedis连接对象放入连接池中，当需要对redis进行操作时从连接池中接用jedis对象，操作完后归还，这样jedis对象可以重复使用，避免了频繁创建socket连接，节省了连接的开销。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接池配置对象,包含了很多默认配置</span><br><span class="line">        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();</span><br><span class="line">        //初始化Jedis连接池，通常来讲JedisPool是单例的</span><br><span class="line">        JedisPool jedisPool = new JedisPool(poolConfig, &quot;127.0.0.1&quot;, 6379);</span><br><span class="line">        Jedis jedis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.从连接池获取jedis对象</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            //2.执行操作</span><br><span class="line">            jedis.set(&quot;hello&quot;, &quot;jedis&quot;);</span><br><span class="line">            System.out.println(jedis.get(&quot;hello&quot;));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            //如果使用JedisPool，那么close操作不是关闭连接，代表归还连接池</span><br><span class="line">            if(jedis != null)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jedis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis事务</title>
      <link href="/2022/05/17/Redis%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/05/17/Redis%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h5 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h5><p><em><strong>Redis单条命令保存原子性，但是事务不保证原子性</strong></em></p><ol><li>一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行</li><li>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证<ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul></li><li>一个事务从开始到执行会经历以下三个阶段<ul><li>开始事务</li><li>命令入队</li><li>执行事务</li></ul></li></ol><h5 id="事务执行过程"><a href="#事务执行过程" class="headerlink" title="事务执行过程"></a>事务执行过程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    # 开启事务</span><br><span class="line">OK</span><br><span class="line"># 命令入队</span><br><span class="line">127.0.0.1:6379&gt; set name yang</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k1 peng</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 hh</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec    # 执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;yang&quot;</span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><h5 id="终止事务"><a href="#终止事务" class="headerlink" title="终止事务"></a>终止事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    # 开启事务</span><br><span class="line">OK</span><br><span class="line"># 命令入队</span><br><span class="line">127.0.0.1:6379&gt; set name yang</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k1 peng</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD   # 取消事务</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h5 id="编译型异常-命令有错"><a href="#编译型异常-命令有错" class="headerlink" title="编译型异常(命令有错)"></a>编译型异常(命令有错)</h5><p><em>事务中所有的命令都不会被执行</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k2  # 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec  # 执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1  #未执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h5 id="运行时异常-语法错误"><a href="#运行时异常-语法错误" class="headerlink" title="运行时异常(语法错误)"></a>运行时异常(语法错误)</h5><p><em>其他命令可以正常执行，错误命令抛出异常</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1  # 语法错误，字符串不能自增</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v2&quot;</span><br></pre></td></tr></table></figure><h5 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a>watch命令</h5><p><em>用于监视一个或多个key，如果在事务执行之前这个或这些key被其他命令所改动，那么事务将被打断</em></p><blockquote><p>watch key [key …]</p></blockquote><p>返回值：OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h5 id="unwatch命令"><a href="#unwatch命令" class="headerlink" title="unwatch命令"></a>unwatch命令</h5><p><em>用于取消watch命令对所有key的监视</em></p><blockquote><p>unwatach</p></blockquote><p>返回值：OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em><strong>可使用watch实现乐观锁</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(三)</title>
      <link href="/2022/05/17/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%89/"/>
      <url>/2022/05/17/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><ol><li><p>BitMap 原本的含义是用一个比特位来映射某个元素的状态。由于一个比特位只能表示 0 和 1 两种状态，所以 BitMap 能映射的状态有限，但是使用比特位的优势是能大量的节省内存空间。</p></li><li><p>在 Redis 中，可以把 Bitmaps 想象成一个以比特位为单位的数组，数组的每个单元只能存储0和1，数组的下标在 Bitmaps 中叫做偏移量。</p></li></ol><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 设置值，其中value只能是 0 和 1</span><br><span class="line">setbit key offset value</span><br><span class="line"></span><br><span class="line"># 获取值</span><br><span class="line">getbit key offset</span><br><span class="line"></span><br><span class="line"># 获取指定范围内值为 1 的个数</span><br><span class="line"># start 和 end 以字节为单位</span><br><span class="line">bitcount key start end</span><br><span class="line"></span><br><span class="line"># BitMap间的运算</span><br><span class="line"># operations 位移操作符，枚举值</span><br><span class="line">  AND 与运算 &amp;</span><br><span class="line">  OR 或运算 |</span><br><span class="line">  XOR 异或 ^</span><br><span class="line">  NOT 取反 ~</span><br><span class="line"># result 计算的结果，会存储在该key中</span><br><span class="line"># key1 … keyn 参与运算的key，可以有多个，空格分割，not运算只能一个key</span><br><span class="line"># 当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0。返回值是保存到 destkey 的字符串的长度（以字节byte为单位），和输入 key 中最长的字符串长度相等。</span><br><span class="line">bitop [operations] [result] [key1] [keyn…]</span><br><span class="line"></span><br><span class="line"># 返回指定key中第一次出现指定value(0/1)的位置</span><br><span class="line">bitpos [key] [value]</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p><strong>1. 用户签到</strong></p><p>很多网站都提供了签到功能，并且需要展示最近一个月的签到情况，这种情况可以使用 BitMap 来实现。<br>根据日期 offset &#x3D; （今天是一年中的第几天） % （今年的天数），key &#x3D; 年份：用户id。</p><p>如果需要将用户的详细签到信息入库的话，可以考虑使用一个一步线程来完成。</p><p><strong>2. 统计活跃用户（用户登陆情况）</strong></p><p>使用日期作为 key，然后用户 id 为 offset，如果当日活跃过就设置为1。</p><p>假如 20201009 活跃用户情况是： [1，0，1，1，0]<br>20201010 活跃用户情况是 ：[ 1，1，0，1，0 ]</p><p>统计连续两天活跃的用户总数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bitop and dest1 20201009 20201010 </span><br><span class="line"># dest1 中值为1的offset，就是连续两天活跃用户的ID</span><br><span class="line">bitcount dest1</span><br></pre></td></tr></table></figure><p>统计20201009 ~ 20201010 活跃过的用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitop or dest2 20201009 20201010 </span><br></pre></td></tr></table></figure><p><strong>3. 统计用户是否在线</strong></p><p>如果需要提供一个查询当前用户是否在线的接口，也可以考虑使用 BitMap 。即节约空间效率又高，只需要一个 key，然后用户 id 为 offset，如果在线就设置为 1，不在线就设置为 0。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(二)</title>
      <link href="/2022/05/16/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
      <url>/2022/05/16/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h5 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h5><p>Redis3.2版本推出，其可以推算地理位置信息，两地之间的距离，方圆几里的人。</p><h5 id="六大命令"><a href="#六大命令" class="headerlink" title="六大命令"></a>六大命令</h5><h6 id="geoadd添加经纬度"><a href="#geoadd添加经纬度" class="headerlink" title="geoadd添加经纬度"></a>geoadd添加经纬度</h6><blockquote><p>[geoadd key longitude latitude member [longitude latitude member …]]</p></blockquote><ul><li>地理位置两极无法直接输入经纬度，一般通过Java程序批量读取地理位置信息插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 116.405285 39.904989 beijing  108.948024  34.263161  shanxi </span><br><span class="line">(integer) 2</span><br><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 87.617733 43.792818 xinjiang</span><br><span class="line">(integer) 1</span><br><span class="line">##添加城市数据</span><br><span class="line">127.0.0.1:6379&gt; geoadd chian:city 115.892151 28.676493 jiangxi</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h6 id="geopos获取经纬度"><a href="#geopos获取经纬度" class="headerlink" title="geopos获取经纬度"></a>geopos获取经纬度</h6><blockquote><p>[geopos key member [member …]]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos chian:city shanxi</span><br><span class="line">1) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">   </span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city shanxi  beijing</span><br><span class="line">1) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">2) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br></pre></td></tr></table></figure><h6 id="geodist距离计算"><a href="#geodist距离计算" class="headerlink" title="geodist距离计算"></a>geodist距离计算</h6><blockquote><p>[geodist key member1 member2 [m|km|ft|mi]]</p></blockquote><ul><li>单位有米,千米,英里,英尺,默认以米作为单位</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi</span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi </span><br><span class="line">&quot;911278.5437&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi m</span><br><span class="line">&quot;911278.5437&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi km</span><br><span class="line">&quot;911.2785&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi  mi</span><br><span class="line">&quot;566.2436&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist chian:city beijing shanxi  ft</span><br><span class="line">&quot;2989759.0015&quot;</span><br></pre></td></tr></table></figure><h6 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h6><blockquote><p>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key]]</p></blockquote><ul><li>以给定的经纬度为中心，找出某一半径内所有的元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">##查询所有的key</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line"></span><br><span class="line">##获取该Key下的所有元素</span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi shanghai</span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">3) (nil)</span><br><span class="line"></span><br><span class="line">##以116.39这个经纬度为中心,半径1000km查询</span><br><span class="line">##一般以哪个精度为中心,这个精度都是用户自己,</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;shanxi&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带withcoord,查询完成后获得经纬度信息</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  withcoord</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">      2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;shanxi&quot;</span><br><span class="line">   2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">      2) &quot;34.2631604414749944&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带withdist,查询完成后获得直线距离</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  withdist </span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;106.5063&quot;</span><br><span class="line">2) 1) &quot;shanxi&quot;</span><br><span class="line">   2) &quot;820.3684&quot;</span><br><span class="line"></span><br><span class="line">##还可以后面携带conut参数,指定获取附近的几个</span><br><span class="line">127.0.0.1:6379&gt; georadius chian:city 116 39 1000 km  count 1</span><br><span class="line">1) &quot;beijing&quot;</span><br></pre></td></tr></table></figure><h6 id="georadiusbymember通过城市查找"><a href="#georadiusbymember通过城市查找" class="headerlink" title="georadiusbymember通过城市查找"></a>georadiusbymember通过城市查找</h6><blockquote><p>[georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key]]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember chian:city beijing 1000 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;shanxi&quot;</span><br></pre></td></tr></table></figure><h6 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h6><blockquote><p>[geohash key member [member …]]</p></blockquote><ul><li>将二维的经纬度转换为一维的字符串，经过hash之后的结果，如果两个字符串越像，则代表越接近</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;chian:city&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geopos chian:city beijing shanxi shanghai jingxi </span><br><span class="line">1) 1) &quot;116.40528291463851929&quot;</span><br><span class="line">   2) &quot;39.9049884229125027&quot;</span><br><span class="line">2) 1) &quot;108.94802302122116089&quot;</span><br><span class="line">   2) &quot;34.2631604414749944&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">4) (nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geohash chian:city beijing shanxi</span><br><span class="line">1) &quot;wx4g0b7xrt0&quot;</span><br><span class="line">2) &quot;wqj6zjmt2u0&quot;</span><br></pre></td></tr></table></figure><h5 id="geospatial的底层基本原理"><a href="#geospatial的底层基本原理" class="headerlink" title="geospatial的底层基本原理"></a>geospatial的底层基本原理</h5><p>geo的底层原理就是zset的封装</p><ol><li><p>查看geo类型的所有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange china 0 -1</span><br></pre></td></tr></table></figure></li><li><p>删除某一项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem china beijing</span><br></pre></td></tr></table></figure></li></ol><p>使用zset的命令依然可以操作geospatial</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种特殊数据类型(一)</title>
      <link href="/2022/05/15/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%80/"/>
      <url>/2022/05/15/Redis%E7%9A%84%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h5 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h5><p><em>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</em></p><ol><li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p></li><li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></li><li><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ol><h5 id="什么是基数"><a href="#什么是基数" class="headerlink" title="什么是基数"></a>什么是基数</h5><blockquote><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><h6 id="PFADD"><a href="#PFADD" class="headerlink" title="PFADD"></a>PFADD</h6><p>Redis Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中。</p><blockquote><p>redis 127.0.0.1:6379&gt; PFADD key element [element …]</p></blockquote><p><em>返回值：整形，如果至少有个元素被添加返回1，否则返回0key，若已添加过该元素也返回0</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h6 id="PFCOUNT"><a href="#PFCOUNT" class="headerlink" title="PFCOUNT"></a>PFCOUNT</h6><p>Redis Pfcount 命令返回给定 HyperLogLog 的基数估算值。</p><blockquote><p>redis 127.0.0.1:6379&gt; PFCOUNT key [key …]</p></blockquote><p><em>返回值：返回给定ke’y</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h6 id="PFMERGE"><a href="#PFMERGE" class="headerlink" title="PFMERGE"></a>PFMERGE</h6><p>Redis PFMERGE 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的。</p><blockquote><p>PFMERGE destkey sourcekey [sourcekey …]</p></blockquote><p><em>返回值：OK</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; PFADD hll1 foo bar zap a</span><br><span class="line">(integer) 1</span><br><span class="line">redis&gt; PFADD hll2 a b c foo</span><br><span class="line">(integer) 1</span><br><span class="line">redis&gt; PFMERGE hll3 hll1 hll2</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis&gt; PFCOUNT hll3</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>网页的UV</p><p>一个人访问一个网站多次，但还是算作一个人</p><p>有0.81%的错误率，可忽略</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis特殊数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据类型</title>
      <link href="/2022/05/15/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/05/15/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作<br />对整数和浮点数执行自增或者自减操作</td></tr><tr><td>LIST</td><td>列表</td><td>从两端压入或者弹出元素，<br />对单个或者多个元素进行修剪<br />只保留一个范围内的元素</td></tr><tr><td>SET</td><td>无序集合</td><td>添加、获取、移除单个元素，<br />检查一个元素是否存在于集合中<br />计算交集、并集、差集，从集合里面随机获取元素</td></tr><tr><td>HASH</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对<br />获取所有键值对，检查某个键是否存在</td></tr><tr><td>ZSET</td><td>有序集合</td><td>添加、获取、删除元素<br />根据分值范围或者成员来获取元素<br /> 计算一个键的排名</td></tr></tbody></table><h5 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h5><ol><li>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value</li><li>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象</li><li>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value  #设置指定key的值</span><br><span class="line">get key  #获取指定key的值</span><br><span class="line">getrange key start end  #返回key中字符串值的子字符</span><br><span class="line">getset key value #将给定key的值设为value，并返回key的旧值</span><br><span class="line">getbit key offset  #对key所存储的字符串值，获取指定偏移量上的位</span><br><span class="line">mget key1[key2...]  #获取所有（一个或多个）给定key的值</span><br><span class="line">setex key seconds value  #将值value关联到key，并将key的过期时间设为seconds（以秒为单位）</span><br><span class="line"><span class="built_in">strlen</span> key  #返回key所存储的字符串值的长度</span><br><span class="line">incr key  #将key中存储的数字值增一</span><br><span class="line">decr key  #将key中存储的数字值减一</span><br><span class="line">append key value  #如果key已经存在并且是一个字符串，append命令将指定的value追加到key原来值的末尾</span><br></pre></td></tr></table></figure><h5 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h5><ol><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</li><li>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lindex key index  #通过索引获取列表中的元素</span><br><span class="line">llen key  #获取列表长度</span><br><span class="line">linsert key before|after pivot value  #在列表元素前或后插入元素</span><br><span class="line">lpush key value1[value2...]  #将一个或多个值插入到列表头部</span><br><span class="line">lpop key  #移出并获取列表的第一个元素</span><br><span class="line">lset key index value  #通过索引设置元素的值</span><br><span class="line">ltrim key start stop  #对一个列表进行修剪</span><br><span class="line">rpop key  #移除列表的最后一个元素，返回值为移除的元素</span><br><span class="line">rpush key value1[value2...]  #在列表末尾添加一个或多个值</span><br></pre></td></tr></table></figure><h5 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h5><ol><li>Redis 的 Set 是 string 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</li><li>集合对象的编码可以是 intset 或者 hashtable。</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sadd key member1[member2...]  #向集合添加一个或多个成员</span><br><span class="line">scard key  #获取集合的成员数</span><br><span class="line">sdiff key1[key2]  #返回第一个集合与其他集合之间的差异</span><br><span class="line">sinter key1[key2]  #返回给定所有集合的交集</span><br><span class="line">sismember key member  #判断member元素是否是集合key的成员</span><br><span class="line">smembers key  #返回集合中的所有成员</span><br><span class="line">sunion key1[key2]  #返回所有给定集合的并集</span><br></pre></td></tr></table></figure><h5 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h5><ol><li>Redis hash 是一个键值(key&#x3D;&gt;value)对集合。</li><li>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hdel key field1[field2]  #删除一个或多个哈希表字段</span><br><span class="line">hexists key field  #查看哈希表key中，指定的字段是否存在</span><br><span class="line">hset key field value  #将哈希表key中的字段field的值设为value</span><br><span class="line">hget key field  #获取存储在哈希表中指定字段的值</span><br><span class="line">hgetall key  #获取在哈希表中指定key的所有字段和值</span><br><span class="line">hkeys key  #获取所有哈希表中的字段</span><br><span class="line">hvals key  #获取哈希表中所有值</span><br><span class="line">klen key  #获取哈希表中字段的数量</span><br></pre></td></tr></table></figure><h5 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h5><ol><li>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</li><li>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</li><li>zset的成员是唯一的,但分数(score)却可以重复。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2022/05/13/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/05/13/Redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h5 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h5><ol><li>方便扩展（数据之间没有关系，很好扩展）</li><li>大数据量高性能（Redis一秒写8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能比较高）</li><li>数据类型的多样性（不需要事先设计数据库）</li></ol><h5 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h5><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h5 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h5><ol><li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li></ol><h5 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h5><ol><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ol><h5 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h5><ol><li><p>概述</p><p>持久化可以理解为存储，就是将数据存储到一个不会丢失的地方，如果把数据放在内存中，电脑关闭或重启数据就会丢失，所以放在内存中的数据不是持久化的，而放在磁盘就算是一种持久化。</p><p>Redis 的数据存储在内存中，内存是瞬时的，如果 linux 宕机或重启，又或者 Redis 崩溃或重启，所有的内存数据都会丢失，为解决这个问题，Redis 提供两种机制对数据进行持久化存储，便于发生故障后能迅速恢复数据。</p></li><li><p>持久化方式</p><ul><li><p>RDB方式</p><p>Redis Database（RDB），就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。</p><p>RDB 保存了在某个时间点的数据集（全部数据）。存储在一个二进制文件中，只有一个文件。默认是 dump.rdb。RDB 技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响 Redis 的正常使用。RDB 恢复数据时比其他 AOF 速度快。</p><p>RDB 方式的数据持久化，仅需在 redis.conf 文件中配置即可，默认配置是启用的。</p></li><li><p>AOF方式</p><p>Append-only File（AOF），Redis 每次接收到一条改变数据的命令时，它将把该命令写到一个 AOF 文件中（只记录写操作，读操作不记录），当 Redis 重启时，它通过执行 AOF 文件中所有的命令来恢复数据。</p></li></ul></li><li><p>redis 默认优先加载 aof 文件（aof 数据最完整）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity基本原理</title>
      <link href="/2022/05/09/SpringSecurity%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2022/05/09/SpringSecurity%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5><ol><li><p><em>SpringSecurity本质是一个过滤器链</em></p></li><li><p>核心功能：用户认证（Authentication）和用户授权 （Authorization）两个部分</p></li><li><p>SpringSecurity 特点 </p><ul><li>和 Spring 无缝整合。</li><li>全面的权限控制。</li><li>专门为 Web 开发而设计。<ul><li>旧版本不能脱离 Web 环境使用。 </li><li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独 引入核心模块就可以脱离 Web 环境。</li></ul></li><li>重量级</li></ul><blockquote><p>Shiro的特点：(Apache旗下的轻量级权限控制框架)</p><ol><li>轻量级。Shiro主张的理念是把复杂的事情变简单，针对对性能有更高要求的互联网应用有更好表现</li><li>通用性<ul><li>好处：不局限于Web环境，可以脱离Web环境使用</li><li>缺陷：在Web环境下一些特定的需求需要手动编写代码定制</li></ul></li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/05/07/Docker/"/>
      <url>/2022/05/07/Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</p><p>Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。</p><h3 id="与虚拟机的比较"><a href="#与虚拟机的比较" class="headerlink" title="与虚拟机的比较"></a>与虚拟机的比较</h3><p>虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p><h5 id="启动速度"><a href="#启动速度" class="headerlink" title="启动速度"></a>启动速度</h5><p>启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p><p>而启动Docker相当于启动宿主操作系统上的一个进程。</p><h5 id="占用资源"><a href="#占用资源" class="headerlink" title="占用资源"></a>占用资源</h5><p>虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器只能开启几十个的虚拟机。</p><p>而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h5 id="更容易迁移"><a href="#更容易迁移" class="headerlink" title="更容易迁移"></a>更容易迁移</h5><h5 id="更容易维护"><a href="#更容易维护" class="headerlink" title="更容易维护"></a>更容易维护</h5><h5 id="更容易扩展"><a href="#更容易扩展" class="headerlink" title="更容易扩展"></a>更容易扩展</h5>]]></content>
      
      
      <categories>
          
          <category> 编码实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="/2022/05/07/Java%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/05/07/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>容器主要包括Collection和Map两种，Collection存储着对象的集合，而Map存储着键值对(两个对象)的映射表</p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><ol><li><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><ul><li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li><li>HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li><li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li></ul></li><li><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><ul><li>ArrayList：基于动态数组实现，支持随机访问。</li><li>Vector：和 ArrayList 类似，但它是线程安全的。</li><li>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li></ul></li><li><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h5><ul><li>LinkedList：可以用它来实现双向队列。</li><li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li></ul></li></ol><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ol><li>TreeMap：基于红黑树实现。</li><li>HashMap：基于哈希表实现。</li><li>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li><li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li></ol><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>因为ArrayList是基于数组实现的，所以支持快速随机访问。</p><p>RandomAccess接口标识着该类支持快速随机访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>数组默认大小为10。</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ol><li>它的实现与ArrayList类似，但是使用了synchronized进行同步。</li><li>与ArrayList的比较<ul><li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li><li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li></ul></li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ol><li><p>基于双向链表实现，使用Node存储链表节点信息，每个链表存储了first和last指针。</p></li><li><p>与ArrayList的比较</p><p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p><ul><li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</li><li>链表不支持随机访问，但插入删除只需要改变指针。</li></ul></li></ol><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ol><li><p>存储结构</p><p>内部包含了一个 Entry 类型的数组 table。Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表。HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值和散列桶取模运算结果相同的 Entry。</p></li><li><p>与Hashtable的比较</p><ul><li>Hashtable 使用 synchronized 来进行同步。</li><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 的迭代器是 fail-fast 迭代器。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li></ul></li></ol><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ol><li>继承自HashMap，因此具有和HashMap一样的快速查找特性。</li><li>内部维护了一个双向链表，用来维护插入顺序。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象思想</title>
      <link href="/2022/05/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
      <url>/2022/05/06/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、三大特性"><a href="#一、三大特性" class="headerlink" title="一、三大特性"></a>一、三大特性</h3><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外的接口使其与外部发生联系。用户无需关心对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析来确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>多态分为编译时多态和运行时多态：</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件：</p><ul><li>继承</li><li>覆盖（重写）</li><li>向上转型</li></ul><p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Instument is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wind</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Wind is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Percussion</span> <span class="keyword">extends</span> <span class="title class_">Instrument</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Percussion is playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Music</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Wind</span>());</span><br><span class="line">        instruments.add(<span class="keyword">new</span> <span class="title class_">Percussion</span>());</span><br><span class="line">        <span class="keyword">for</span>(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Wind is playing…</p><p>Percussion is playing…</p></blockquote><h3 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h3><h5 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系(Generalization)"></a>泛化关系(Generalization)</h5><p>用来描述继承关系，在Java中使用<code>extends</code>关键字</p><h5 id="实现关系-Realization"><a href="#实现关系-Realization" class="headerlink" title="实现关系(Realization)"></a>实现关系(Realization)</h5><p>用来实现一个接口，在Java中使用<code>implements</code>关键字</p><h5 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系(Aggregation)"></a>聚合关系(Aggregation)</h5><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><h5 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h5><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><h5 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h5><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><h5 id="依赖关系-Dependency"><a href="#依赖关系-Dependency" class="headerlink" title="依赖关系(Dependency)"></a>依赖关系(Dependency)</h5><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p><ul><li>A 类是 B 类方法的局部变量；</li><li>A 类是 B 类方法的参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化。</li></ul><h3 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h3><h5 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h5><blockquote><p>修改一个类的原因应该只有一个。</p></blockquote><p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p><h5 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h5><blockquote><p>类应该对扩展开放，对修改关闭。</p></blockquote><p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p><p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p><h5 id="接口分离原则"><a href="#接口分离原则" class="headerlink" title="接口分离原则"></a>接口分离原则</h5><blockquote><p>子类对象必须能够替换掉所有父类对象。</p></blockquote><p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p><p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度</p><h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><blockquote><p>不应该强迫客户依赖于它们不用的方法。</p></blockquote><p>因此使用多个专门的接口比使用单一的总接口要好。</p><h5 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h5><blockquote><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p><p>依赖于抽象意味着：</p><ul><li>任何变量都不应该持有一个指向具体类的指针或者引用；</li><li>任何类都不应该从具体类派生；</li><li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis易错题总结</title>
      <link href="/2022/05/05/MyBatis%E6%98%93%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/05/MyBatis%E6%98%93%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="1-和-的区别是什么？"><a href="#1-和-的区别是什么？" class="headerlink" title="1. #{}和${}的区别是什么？"></a>1. #{}和${}的区别是什么？</h5><ol><li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和<code> sql</code>内部，属于静态文本替换，比如${driver}会被静态替换为<code>com.mysql.jdbc. Driver</code>。</li><li><code>#&#123;&#125;</code>是 <code>sql</code> 的参数占位符，<code>MyBatis</code> 会将 <code>sql</code> 中的<code>#&#123;&#125;</code>替换为? 号，在 <code>sql</code> 执行前会使用 <code>PreparedStatement</code> 的参数设置方法，按序给 <code>sql</code> 的<code>? </code>号占位符设置参数值，比如 <code>ps.setInt(0, parameterValue)</code>，<code>#&#123;item.name&#125;</code> 的取值方式为使用反射从参数对象中获取 <code>item</code> 对象的<code> name</code> 属性值，相当于 <code>param.getItem().getName()</code></li></ol><h5 id="2-Xml-映射文件中，除了常见的-select-insert-update-delete-标签之外，还有哪些标签？"><a href="#2-Xml-映射文件中，除了常见的-select-insert-update-delete-标签之外，还有哪些标签？" class="headerlink" title="2. Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？"></a>2. <code>Xml </code>映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？</h5><ol><li>还有很多其他的标签， <code>&lt;resultMap&gt;</code> 、 <code>&lt;parameterMap&gt;</code> 、 <code>&lt;sql&gt;</code> 、 <code>&lt;include&gt;</code> 、 <code>&lt;selectKey&gt;</code> ，加上动态<code> sql</code> 的 9 个标签， <code>trim|where|set|foreach|if|choose|when|otherwise|bind</code> 等，其中 <code>&lt;sql&gt;</code> 为 <code>sql</code> 片段标签，通过 <code>&lt;include&gt;</code> 标签引入 <code>sql</code> 片段， <code>&lt;selectKey&gt;</code> 为不支持自增的主键生成策略标签</li></ol><h5 id="3-最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？"><a href="#3-最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？" class="headerlink" title="3. 最佳实践中，通常一个xml映射文件，都会写一个Dao接口与之对应，那这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能不能重载？"></a>3. 最佳实践中，通常一个<code>xml</code>映射文件，都会写一个<code>Dao</code>接口与之对应，那这个<code>Dao</code>接口的工作原理是什么？<code>Dao</code>接口里的方法，参数不同时，方法能不能重载？</h5><ol><li><code>Dao</code>接口的工作原理是<code>JDK</code>动态代理，<code>MyBatis</code>运行时会使用<code>JDK</code>动态代理为<code>Dao</code>接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行<code>MappedStatementsuodaib</code>的<code>sql</code>，然后将<code>sql</code>执行结果返回。</li><li><code>Dao</code>接口方法可以重载，但要满足一下条件<ul><li>仅有一个无参方法和一个有参方法</li><li>多个有参方法时，参数数量必须一致，且使用相同的<code>@Param</code></li><li>多个接口对应的映射必须只有一个，即<code>xml</code>里的<code>id</code>不允许重复</li></ul></li></ol><h5 id="4-MyBatis是如何进行分页的？分页插件的原理是什么？"><a href="#4-MyBatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="4. MyBatis是如何进行分页的？分页插件的原理是什么？"></a>4. <code>MyBatis</code>是如何进行分页的？分页插件的原理是什么？</h5><ol><li><p><code>MyBatis </code>使用 <code>RowBounds </code>对象进行分页，它是针对<code>ResultSet</code>结果集执行的内存分页，而非物理分页</p></li><li><p>可以在 <code>sql</code> 内直接书写带有物理分页的参数来完成物理分页功能</p></li><li><p>也可以使用分页插件来完成物理分页</p><p>分页插件的基本原理是使用<code>MyBatis</code>提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 <code>sql</code>，然后重写<code> sql</code>，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。</p><blockquote><p><code>select _ from student</code> ，拦截 <code>sql</code> 后重写为： <code>select t._ from （select \* from student）t limit 0，10</code></p></blockquote></li></ol><h5 id="5-MyBatis执行批量插入，能返回数据库主键列表吗？"><a href="#5-MyBatis执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="5. MyBatis执行批量插入，能返回数据库主键列表吗？"></a>5. <code>MyBatis</code>执行批量插入，能返回数据库主键列表吗？</h5><ol><li>能，<code>JDBC</code>与<code>MyBatis</code>都可以</li></ol><h5 id="6-MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理"><a href="#6-MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理" class="headerlink" title="6. MyBatis动态sql是做什么的？都有哪些动态sql？简述动态sql的执行原理"></a>6. <code>MyBatis</code>动态<code>sql</code>是做什么的？都有哪些动态<code>sql</code>？简述动态<code>sql</code>的执行原理</h5><ol><li><code>MyBatis</code>动态<code>sql</code>可以让我们在<code>xml</code>映射文件内，以标签的形式编写动态<code>sql</code>，完成逻辑判断和动态拼接<code>sql</code>的功能，<code>MyBatis</code>提供了9种动态<code>sql</code>标签<code>trim|where|set|foreach|if|choose|when|otherwise|bind</code></li><li>执行原理为，使用<code>OGNL</code>从<code>sql</code>参数对象中计算表达式的值，根据表达式的值动态拼接<code>sql</code>，以此来完成动态<code>sql</code>的功能</li></ol><h5 id="7-MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#7-MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="7. MyBatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>7. <code>MyBatis</code>是如何将<code>sql</code>执行结果封装为目标对象并返回的？都有哪些映射形式？</h5><ol><li>使用<code>&lt;resultMap&gt;</code> 标签，逐一定义列名和对象属性名之间的映射关系</li><li>使用<code>sql</code>列的别名功能，将列别名书写为对象属性名</li><li>有了列名与属性名的映射关系后，<code>MyBatis</code>通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的</li></ol><h5 id="8-MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别"><a href="#8-MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别" class="headerlink" title="8. MyBatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别"></a>8. <code>MyBatis</code>能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别</h5><ol><li>关联对象查询，有两种实现方式，一种是单独发送一个<code>sql</code>去查询关联对象，赋给主对象，然后返回主对象；另一种是使用嵌套查询，嵌套查询的含义为使用<code>jion</code>查询，一部分列是A对象的属性值，另一部分列是关联对象B的属性值，好处是只发一个<code>sql</code>查询，就可以把主对象和其关联对象查出来。</li></ol><h5 id="9-MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#9-MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="9. MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>9. <code>MyBatis</code>是否支持延迟加载？如果支持，它的实现原理是什么？</h5><ol><li><code>MyBatis</code> 仅支持 <code>association</code> 关联对象和 <code>collection</code> 关联集合对象的延迟加载，<code>association</code> 指的就是一对一，<code>collection</code> 指的就是一对多查询。在 <code>MyBatis</code> 配置文件中，可以配置是否启用延迟加载 <code>lazyLoadingEnabled=true|false。</code></li><li>它的原理是，使用 <code>CGLIB</code> 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 <code>a.getB().getName()</code> ，拦截器 <code>invoke()</code> 方法发现 <code>a.getB()</code> 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 <code>sql</code>，把 B 查询上来，然后调用 <code>a.setB(b)</code>，于是 a 的对象 b 属性就有值了，接着完成 <code>a.getB().getName()</code> 方法的调用。</li></ol><h5 id="10-MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复"><a href="#10-MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复" class="headerlink" title="10. MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复"></a>10. <code>MyBatis</code>的<code>xml</code>映射文件中，不同的<code>xml</code>映射文件，id是否可以重复</h5><ol><li>不同的<code>xml</code>映射文件，如果配置了<code>namespace</code>，那么id可以重复；如果没有配置<code>namespace</code>，那么<code>id</code>不能重复</li><li>原因是<code>namespace+id</code>是作为<code>Map&lt;String, MappedStatement&gt;</code>的<code>key</code>使用的，如果没有<code>namespace</code>，就只剩下<code>id</code>，那么<code>id</code>重复会导致数据相互覆盖，有了<code>namespace</code>，自然id就可以重复，<code>namespace</code>不同，<code>namespace+id</code>自然也就不同</li></ol><h5 id="11-MyBatis中如何执行批处理"><a href="#11-MyBatis中如何执行批处理" class="headerlink" title="11. MyBatis中如何执行批处理"></a>11. <code>MyBatis</code>中如何执行批处理</h5><ol><li>使用<code>BatchExecutor</code>完成批处理</li></ol><h5 id="12-MyBatis是否可以映射Enum枚举类"><a href="#12-MyBatis是否可以映射Enum枚举类" class="headerlink" title="12. MyBatis是否可以映射Enum枚举类"></a>12. <code>MyBatis</code>是否可以映射<code>Enum</code>枚举类</h5><ol><li><code>MyBatis</code> 可以映射枚举类，不单可以映射枚举类，<code>MyBatis</code> 可以映射任何对象到表的一列上。映射方式为自定义一个 <code>TypeHandler</code> ，实现 <code>TypeHandler</code> 的 <code>setParameter()</code> 和 <code>getResult()</code> 接口方法。 <code>TypeHandler</code> 有两个作用，一是完成从 <code>javaType</code> 至 <code>jdbcType</code> 的转换，二是完成 <code>jdbcType</code> 至 <code>javaType</code> 的转换，体现为 <code>setParameter()</code> 和 <code>getResult()</code> 两个方法，分别代表设置 <code>sql</code> 问号占位符参数和获取列查询结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈@Autowired和@Resource注解的区别</title>
      <link href="/2022/05/01/%E8%B0%88-Autowired%E5%92%8C-Resource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/05/01/%E8%B0%88-Autowired%E5%92%8C-Resource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p><code>@Autowired</code> 和<code>@Resource</code> 可以对成员变量、方法或构造函数进行标注，来完成自动装配的工作。</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ol><li><p><code>@Autowired</code> 默认按类型装配(这个注解是属于<code>spring</code> 的)，默认情况下必须要求依赖对象存在，如果要允许<code>null</code> 值，可以设置它的<code>required</code> 属性为<code>false</code> ，如<code>@Autowired(required=false)</code> ，如果想使用名称装配可以结合<code>@Qualifier</code> 注解进行使用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;userDto&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br></pre></td></tr></table></figure><ul><li><code>@Autowired</code> 的实现</li></ul><blockquote><p>注解驱动配置会向spring容器中注册<code>AutowiredAnnotationBeanPostProcessor</code>。<br> 当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code> 将扫描 <code>Spring </code>容器中所有 Bean，当发现 Bean 中拥有 <code>@Autowired </code>注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。</p></blockquote></li><li><p><code>@Resource</code> 默认按照名称进行装配(<code>JDK1.6</code>开始支持的注解)，名称可以通过<code>name</code>属性进行指定，也提供按照<code>byType</code>注入</p><ul><li>如果没有指定<code>name</code>属性，当注解写在字段上时，默认取字段名，按照名称查找；</li><li>当注解标注在属性的<code>setter</code>方法上，即默认取属性名作为<code>bean</code>名称寻找依赖对象；</li><li>当找不到与名称匹配的bean时才按照类型进行装配，但需要注意的是，如果<code>name</code>属性一旦指定，就只会按照名称进行装配；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;userDto&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(type = UserDto.class)</span></span><br><span class="line"><span class="keyword">private</span> UserDto userDto;</span><br></pre></td></tr></table></figure><ul><li><code>@Resource</code> 装配顺序<ul><li>如果同时指定了<code>name</code>和<code>type</code>，则从<code>spring</code>上下文中找到唯一匹配的<code>bean</code>进行装配，找不到则会抛出异常</li><li>如果指定了<code>name</code>，则从上下文中查找名称<code>id</code>匹配的<code>bean</code>进行装配，找不到则抛出异常</li><li>如果指定了<code>type</code>，则从上下文中找到类型匹配的唯一<code>bean</code>进行装配，找不到或找到多个，都会抛出异常</li><li>如果既没有指定<code>name</code>，又没有指定<code>type</code>，则自动按照<code>byName</code>方式进行装配，如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配</li></ul></li></ul></li><li><p><code>@Autowired</code> 和<code>@Resource</code> 作用域不同</p><ul><li><code>@Autowired</code>可以作用在<code>construct</code>，<code>field</code>，<code>setter</code>方法（可以有多个参数，并且参数上可以使用<code>@Qualifies</code>进行标注）</li><li><code>@Resource</code>只可以使用在<code>field</code>，<code>setter</code>方法上（只能是单个单数的<code>setter</code>方法）</li></ul></li></ol><h5 id="Autowired-和-Resource-的正确使用"><a href="#Autowired-和-Resource-的正确使用" class="headerlink" title="@Autowired 和@Resource 的正确使用"></a><code>@Autowired</code> 和<code>@Resource</code> 的正确使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure><p>如上代码常有warning的提示</p><blockquote><p>Field injection is not recommended Inspection info: Spring Team recommends: “Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies”.</p></blockquote><ol><li><p>注入方式</p><ul><li><p>基于构造函数的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于Setter的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">     <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">     </span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>基于字段的依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService&#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于字段的依赖注入缺点</p><ul><li><p>对于有<code>final</code> 修饰的变量不好使</p><blockquote><p><code>Spring</code>的<code>IOC</code>对待属性的注入使用的是set形式，但是<code>final</code>类型的变量在调用class的构造函数的这个过程当中就得初始化完成，这个是基于字段的依赖注入做不到的地方．只能使用<strong>基于构造函数的依赖注入</strong>的方式</p></blockquote></li><li><p>掩盖单一职责的设计思想</p><blockquote><p>在<code>OOP</code>的设计当中有一个单一职责思想，如果采用的是基于构造函数的依赖注入的方式来使用<code>Spring</code>的<code>IOC</code>的时候，当你注入的太多的时候，这个构造方法的参数就会很庞大</p></blockquote></li><li><p>与<code>Spring</code>的<code>IOC</code>机制紧密耦合</p><blockquote><p>当你使用<strong>基于字段的依赖注入</strong>方式的时候，确实可以省略构造方法和<code>setter</code>这些个模板类型的方法，但是，你把控制权全给<code>Spring</code>的<code>IOC</code>了，别的类想重新设置下你的某个注入属性，没法处理(当然反射可以做到)。</p><p>本身<code>Spring</code>的目的就是解藕和依赖反转，结果通过再次与类注入器，失去了通过自动装配类字段而实现的对类的解耦，从而使类在<code>Spring</code>容器之外无效。</p></blockquote></li><li><p>隐藏依赖性</p><blockquote><p>当你使用<code>Spring</code>的<code>IOC</code>的时候，被注入的类应当使用一些<code>public</code>类型(构造方法，和setter类型方法)的方法来向外界表达:我需要什么依赖.但是基于字段的依赖注入的方式，基本都是<code>private</code>形式的，<code>private</code>把属性都给封印到<code>class</code>当中了。</p></blockquote></li></ul></li></ol><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol><li>应避免使用基于字段的依赖注入，推荐使用基于构造函数和基于<code>setter</code>的依赖注入</li><li>对于必需的依赖项，建议使用基于构造函数的注入，以使它们成为不可变的，并防止它们为<code>null</code></li><li>对于可选的依赖项，建议使用基于<code>setter</code>的注入</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot如何去获取前端传递的参数</title>
      <link href="/2022/05/01/spring-boot%E5%A6%82%E4%BD%95%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%82%E6%95%B0/"/>
      <url>/2022/05/01/spring-boot%E5%A6%82%E4%BD%95%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数"><a href="#spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数" class="headerlink" title="spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数"></a><em>spring-boot获取从前端传过来的参数，主要有两大类，一类时URL里的参数，一类是请求body里的参数</em></h5><h5 id="url-里的参数"><a href="#url-里的参数" class="headerlink" title="url 里的参数"></a><code>url</code> 里的参数</h5><ol><li><p>路径参数</p><p>是指再请求路径里携带的参数，如</p><blockquote><p>前端请求：</p><p>Get：<a href="http://localhost:8081/user/123">http://localhost:8081/user/123</a></p></blockquote><blockquote><p>后端获取：</p><p>@GetMapping(“&#x2F;{id}”)</p><p>public Integer getUserId(@PathVariable(name &#x3D; “id”) Integer id){</p><p>​return id;</p><p>}</p></blockquote></li><li><p>查询参数</p><p>查询参数就是请求的<code>url</code> 里<code>?</code> 后的键值对</p><blockquote><p>前端请求：</p><p>Get：<a href="http://localhost:8081/user?id=123">http://localhost:8081/user?id=123</a></p></blockquote><p><em>请求url里的查询参数通过@RequestParam注解可以和方法里的参数进行一一对应</em></p><blockquote><p>后端获取：</p><p>@GetMapping(“&#x2F;user”)</p><p>public Integer getUserId(@RequestParm(name &#x3D; “id”) Integer id){</p><p>​return id;</p><p>}</p></blockquote></li><li><p>路径参数和查询参数结合</p><p>同上</p></li></ol><h5 id="请求body-里的参数"><a href="#请求body-里的参数" class="headerlink" title="请求body 里的参数"></a>请求<code>body</code> 里的参数</h5><p><em>当前端传递过来一个<code>json</code>数据，通常采用一下两种方式来接收</em></p><ol><li><p>Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">createBanner</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; banner)</span>&#123;</span><br><span class="line">    banner.put(<span class="string">&quot;id&quot;</span>, <span class="number">1243</span>);</span><br><span class="line">    <span class="keyword">return</span> banner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>@RequestBody</code> 的这个注解将<code>body</code> 里的参数转化成一个<code>map</code> </p><p><strong>不推荐使用</strong></p></li><li><p>自定义对象Dto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">createBanner</span><span class="params">(<span class="meta">@RequestBody</span> BannerDto banner)</span>&#123;</span><br><span class="line"><span class="comment">//具体实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用<code>@RequestBody</code> 来标记<code>BannerDto</code> 对象，<code>spring-boot</code> 会自动调用对象的<code>getter</code> 和<code>setter</code> 方法给它赋值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot获取值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Echarts报错</title>
      <link href="/2022/04/29/%E4%BD%BF%E7%94%A8Echarts%E6%8A%A5%E9%94%99Error-Initialize-failed-invalid-dom/"/>
      <url>/2022/04/29/%E4%BD%BF%E7%94%A8Echarts%E6%8A%A5%E9%94%99Error-Initialize-failed-invalid-dom/</url>
      
        <content type="html"><![CDATA[<h3 id="使用Echarts-报错Error-Initialize-failed-invalid-dom"><a href="#使用Echarts-报错Error-Initialize-failed-invalid-dom" class="headerlink" title="使用Echarts 报错Error: Initialize failed: invalid dom."></a><strong>使用<code>Echarts</code> 报错<code>Error: Initialize failed: invalid dom.</code></strong></h3><blockquote><p><code>[Vue warn]: Error in mounted hook: &quot;Error: Initialize failed:invalid dom.&quot;</code></p></blockquote><h4 id="报错代码："><a href="#报错代码：" class="headerlink" title="报错代码："></a>报错代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getChart</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> option = &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&quot;会员性别数量统计&quot;</span>,</span><br><span class="line">          <span class="attr">subtext</span>: <span class="string">&quot;趋势图&quot;</span>,</span><br><span class="line">          <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="string">&quot;女&quot;</span>, <span class="string">&quot;男&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">data</span>: [],</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">data</span>: [],</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> chartDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(chartDom);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Echarts</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        option.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = res.<span class="property">data</span>;</span><br><span class="line">        option.<span class="property">series</span>[<span class="number">1</span>].<span class="property">data</span> = res.<span class="property">data</span>;</span><br><span class="line">        myChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h4><p><code>created</code> 中元素还未挂载到页面，此时操作DOM则会报错。</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>在<code>mounted</code> 中调用操作元素的方法，当页面执行到<code>mounted</code> 时，该页面所有元素都已经挂载完成。</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getChart</span>();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--单例模式</title>
      <link href="/2022/04/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><p><em>属于创建型模式，它提供了一种创建对象的最佳方式。</em></p><h5 id="1-特征"><a href="#1-特征" class="headerlink" title="1. 特征"></a>1. 特征</h5><ol><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ol><h5 id="2-主要解决"><a href="#2-主要解决" class="headerlink" title="2. 主要解决"></a>2. 主要解决</h5><ol><li>一个全局使用的类频繁地创建与销毁。</li></ol><h5 id="3-何时使用："><a href="#3-何时使用：" class="headerlink" title="3. 何时使用："></a>3. 何时使用：</h5><ol><li>当您想控制实例数目，节省系统资源的时候。</li></ol><h5 id="4-如何解决："><a href="#4-如何解决：" class="headerlink" title="4. 如何解决："></a>4. 如何解决：</h5><ol><li>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</li></ol><h5 id="5-关键代码："><a href="#5-关键代码：" class="headerlink" title="5. 关键代码："></a>5. 关键代码：</h5><ol><li>构造函数是私有的。</li></ol><h5 id="6-优点："><a href="#6-优点：" class="headerlink" title="6. 优点："></a>6. 优点：</h5><ol><li><p>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p></li><li><p>避免对资源的多重占用（比如写文件操作）。</p></li></ol><h5 id="7-缺点："><a href="#7-缺点：" class="headerlink" title="7. 缺点："></a>7. 缺点：</h5><ol><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li></ol><h5 id="8-应用场景"><a href="#8-应用场景" class="headerlink" title="8. 应用场景"></a>8. 应用场景</h5><ol><li>在应用场景中，某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。</li><li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li><li>当某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。</li></ol><h4 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h4><h5 id="1-懒汉式"><a href="#1-懒汉式" class="headerlink" title="1. 懒汉式"></a>1. 懒汉式</h5><p>​     描述：具备很好的lazy loading，能够在多线程中很好的工作，但效率低</p><p>​     优点：第一次调用才初始化，避免内存浪费</p><p>​     缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-饿汉式"><a href="#2-饿汉式" class="headerlink" title="2. 饿汉式"></a>2. 饿汉式</h5><p>​     描述：不具备 lazy loading，但比较常用，容易产生垃圾对象</p><p>​     优点：没有加锁，执行效率会提高</p><p>​     缺点：类加载时就初始化，浪费内存</p><p>​     基于 <code>classloader</code> 机制避免了多线程的同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-双检锁-x2F-双重校验锁-DCL-即double-checked-locking"><a href="#3-双检锁-x2F-双重校验锁-DCL-即double-checked-locking" class="headerlink" title="3. 双检锁&#x2F;双重校验锁(DCL, 即double-checked locking)"></a>3. 双检锁&#x2F;双重校验锁(DCL, 即double-checked locking)</h5><p>​     描述：采用双锁机制，安全且在多线程情况下能保持高性能，可在实例域需要延迟初始化时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-登记式-x2F-静态内部类"><a href="#4-登记式-x2F-静态内部类" class="headerlink" title="4. 登记式&#x2F;静态内部类"></a>4. 登记式&#x2F;静态内部类</h5><p>​     利用<code>classloader</code> 机制来保证只有一个线程，只适用于静态域的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5. 枚举"></a>5. 枚举</h5><p>​     <code>JDK1.5 </code> 及以后，不具备<code>lazy loading</code> ，但则是实现单例模式的最佳方法，自动支持序列化机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--工厂模式</title>
      <link href="/2022/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql中UTF-8编码总结</title>
      <link href="/2022/04/25/MySql%E4%B8%ADUTF-8%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/25/MySql%E4%B8%ADUTF-8%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在<code>MySQL</code>中，<code>UTF-8</code> 编码只<strong>支持每个字符最多三个字节</strong>，而真正的 <code>UTF-8 </code> 是每个字符最多四个字节。 在<code>UTF-8</code> 编码中，中文是占3个字节，其他数字、英文、符号占一个字节。 但<code>emoji</code>符号占4个字节，一些较复杂的文字、繁体字也是4个字节，在<code>MySQL</code> 中应使用<code>utf8mb4</code> 编码。</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>共有23中设计模式，这些模式可以分为三大类：创建型模式<code>Creational Patterns </code> ，结构型模式<code>Structral Patterns</code> ，行为型模式<code>Behavioral Patterns</code> 。</p><h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p>​提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ol><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ol><h5 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h5><p>​关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ol><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ol><h5 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h5><p>​关注对象之间的通信。</p><ol><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ol><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><h5 id="1-开闭原则（Open-Close-Principle）"><a href="#1-开闭原则（Open-Close-Principle）" class="headerlink" title="1. 开闭原则（Open Close Principle）"></a>1. 开闭原则（Open Close Principle）</h5><p>​即对扩展开放，对修改关闭。在程序需要进行扩展的时候，不能去修改原有的代码，实现一个热插拔的效果。使程序的扩展性更好，易于维护和升级。通常采用接口和抽象类来实现。</p><h5 id="2-里氏代换原则（Liskov-Substitution-Principle）"><a href="#2-里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2. 里氏代换原则（Liskov Substitution Principle）"></a>2. 里氏代换原则（Liskov Substitution Principle）</h5><p>​ 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h5 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒转原则（Dependence Inversion Principle）"></a>3. 依赖倒转原则（Dependence Inversion Principle）</h5><p>​这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>​这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h5 id="5-迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5-迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5. 迪米特法则，又称最少知道原则（Demeter Principle）"></a>5. 迪米特法则，又称最少知道原则（Demeter Principle）</h5><p>​最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h5 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6. 合成复用原则（Composite Reuse Principle）"></a>6. 合成复用原则（Composite Reuse Principle）</h5><p>​合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习-索引</title>
      <link href="/2022/04/23/MySql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/04/23/MySql%E5%AD%A6%E4%B9%A0-%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><ol><li>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引</li></ol><h3 id="索引的实现原理"><a href="#索引的实现原理" class="headerlink" title="索引的实现原理"></a>索引的实现原理</h3><ol><li>在<code>MySql</code> 数据库当中索引是需要排序的，<code>因为只有排序才会有区间查找，也能缩小范围</code>，并且这个排序和<code>TreeSet</code> 数据结构相同，其底层是一个自平衡的二叉树，在<code>MySql</code> 中索引是一个B-Tree数据结构。</li><li>遵循左小右大原则存放，采用中序遍历方式遍历数据</li><li>在任何数据库当中，主键上都会自动添加索引对象，在<code>MySql</code> 当中，一个字段上如果有unique约束的话，也会自动创建索引对象</li><li>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号</li><li>在<code>MySql</code> 中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在<code>MyISAM</code> 存储引擎中，索引存储在一个<code>.MYI</code> 文件中；在<code>InnoDB</code> 存储引擎中索引被存储在一个逻辑名称叫<code>tablespace</code> 的当中；在MEMORY存储引擎中索引被存储在内存当中。不管索引存储在哪里，索引在<code>MySql</code> 当中都是一个树的形式存在<code>平衡二叉树</code> 。</li></ol><h3 id="什么条件下会添加索引"><a href="#什么条件下会添加索引" class="headerlink" title="什么条件下会添加索引"></a>什么条件下会添加索引</h3><ol><li><p>数据量庞大</p></li><li><p>该字段经常出现在where的后面，以条件的形式存在，也就是做这个字段总被扫描</p></li><li><p>该字段很少的<code>DML</code> 操作，因为<code>DML</code> 后，索引需要重新排序</p><blockquote><p>建议不要随意添加索引，因为索引也是要维护的，太多的话反而会降低系统的性能</p><p>建议通过主键或unique约束的字段进行查询，效率是比较高的</p></blockquote></li></ol><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><blockquote><p>masql&gt;CREATE INDEX indexName ON table_name (column_name)</p></blockquote><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><ol><li><p>select * from table where name like ‘%T’&#96; name上即使添加了索引，也不会走索引，因为模糊匹配当中以“%”开头了，尽量避免模糊查询的时候以“%”开始 </p></li><li><p>使用or的时候会失效，如果使用or那么要求or两边字段都要有索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个字段上的索引也会实现，所以这就是为什么不建议使用or的原因</p></li><li><p>使用复合索引的时候，没有使用左侧的列查询，索引失效</p></li><li><p>在where当中索引列参加了运算，索引失效</p></li><li><p>在where当中索引列使用了函数</p></li><li><p>索引是各种数据库进行优化的重要手段，优化的时候优先考虑的因素就是索引</p><ul><li><p>单一索引：一个字段上添加索引</p></li><li><p>复合索引：两个字段或更多的字段上添加索引</p></li><li><p>主键索引：主键上添加索引</p></li><li><p>唯一性索引：具有unique的约束的字段上添加索引</p><blockquote><p>唯一性比较弱的字段上添加索引用处不大</p></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习--事务</title>
      <link href="/2022/04/20/MySql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/04/20/MySql%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>一个事务就是一个完整的业务逻辑，是一个最小的工作单元，不可再分</li><li>只有<code>DML</code> 语句才与事务有关</li><li>提交事务：<code>commit</code> ；回滚事务：<code>rollback</code> ；</li><li><code>mysql</code> 默认开启自动提交事务，若需手动开启，则先执行<code> begin</code> 或<code>start transaction</code>或<code>set autocommit=0</code>，用来禁止使用当前会话的自动提交，最后手动输入执行<code>commit</code> 命令</li><li>事务处理可以用来维护数据库的完整性，保证成批的 <code>SQL </code> 语句要么全部执行，要么全部不执行。</li></ol><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><ol><li><p>原子性（<strong>A</strong>tomicity，或称不可分割性）</p><p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>一致性（<strong>C</strong>onsistency）</p><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p>隔离性（<strong>I</strong>solation，又称独立性）</p><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读已提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</p></li><li><p>持久性（<strong>D</strong>urability）</p><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ol><h3 id="事务间的隔离级别"><a href="#事务间的隔离级别" class="headerlink" title="事务间的隔离级别"></a>事务间的隔离级别</h3><ol><li>读未提交<code>Read uncommitted</code> ：最低的隔离级别。事务A可以读到事务B未提交的数据，存在的问题是脏读现象，称读到了脏数据；</li><li>读已提交<code>Read Committed</code> ：事务A只能读到事务B已提交的数据，解决了脏读现象，存在不可重复读取数据的问题（在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取数据的时候读到的数据是4条，3&lt;&gt;4，称为不可重复读（Oracle默认的事务隔离级别）</li><li>可重复读<code>Repeatable Reads</code> ：事务A开启之后，不管是多久，每一次再事务A中读取到的数据都是一致的，即使事务B将数据已修改，并且提交了，事务A读取到的数据还是没有发生改变；解决了不可重复读的问题，出现了幻影读，即不够真实（Mysql默认的事务隔离级别）</li><li>序列化&#x2F;串行化<code>Serializable</code> ：是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行。脏读、不可重复读、幻读都不会出现。</li></ol><h3 id="事务处理的两种方法"><a href="#事务处理的两种方法" class="headerlink" title="事务处理的两种方法"></a>事务处理的两种方法</h3><ol><li>用 BEGIN, ROLLBACK, COMMIT来实现<ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul></li><li>直接用 SET 来改变 MySQL 的自动提交模式:<ul><li><strong>SET AUTOCOMMIT &#x3D; 0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT &#x3D; 1</strong> 开启自动提交</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习--基础</title>
      <link href="/2022/04/19/MySql%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/19/MySql%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li><strong>-u</strong> : 登录的用户名;</li><li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ul><p>若登录本机的MySQL数据库，则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use 数据库名</span><br></pre></td></tr></table></figure><h5 id="列出-MySQL-数据库管理系统的数据库列表"><a href="#列出-MySQL-数据库管理系统的数据库列表" class="headerlink" title="列出 MySQL 数据库管理系统的数据库列表"></a>列出 MySQL 数据库管理系统的数据库列表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><h5 id="显示指定数据库的所有表"><a href="#显示指定数据库的所有表" class="headerlink" title="显示指定数据库的所有表"></a>显示指定数据库的所有表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="表的创建与删除"><a href="#表的创建与删除" class="headerlink" title="表的创建与删除"></a>表的创建与删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 数据类型, ...);</span><br></pre></td></tr></table></figure><h5 id="快速创建表"><a href="#快速创建表" class="headerlink" title="快速创建表"></a>快速创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> teble table1 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure><p><em>将一个查询结果当作一张表新建</em></p><h5 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h5><ol><li><p>delete原理：一个一个删，数据在硬盘上的真实存储空间不会被释放，效率低，但可回滚</p></li><li><p>truncate：效率高，不支持回滚，物理删除</p></li></ol><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="sql的分类"><a href="#sql的分类" class="headerlink" title="sql的分类"></a>sql的分类</h3><ol><li><p>数据查询语言（DQL-Data Query Language）</p><p>代表关键字：select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件]</span><br><span class="line">[LIMIT N]</span><br></pre></td></tr></table></figure></li><li><p>数据操作语言（DML-Data Manipulation Language）</p><p>代表关键字：insert, delete, update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause];</span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span>value1, field2<span class="operator">=</span>value2 [<span class="keyword">WHERE</span> Clause];</span><br></pre></td></tr></table></figure></li><li><p>数据定义语言（DDL-Data Definition Language）</p><p>代表关键字：create, drop, alter</p></li><li><p>事务控制语言（TCL-Transactional Control Language）</p><p>代表关键字：commit, rollback</p></li><li><p>数据控制语言（DCL-Data Control Language）</p><p>代表关键字：grant, revoke</p></li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>from &gt; where &gt; group by &gt; having &gt; select &gt; order by &gt; limit</p><ol><li><p>group by</p><p><code>group by</code>语句根据一个或多个列对结果集进行分组。在分组的列上可以使用 COUNT, SUM, AVG,等函数。</p></li><li><p>having</p><p><code>having</code> 后可接聚合函数</p></li><li><p>order by</p><p><code>order</code> 用来对查询结果进行一个或多个字段排序</p><p> ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列</p></li></ol><h3 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h3><blockquote><p>多表连接会降低查询效率，因为笛卡尔积的原因查询次数为两张表行数的乘积，只是显示的有所不同。</p></blockquote><ol><li>内连接(inner)：等值连接，非等值连接，自连接</li><li>外连接(outer)：左外连接，右外连接</li><li>全连接</li></ol><h5 id="表连接语法"><a href="#表连接语法" class="headerlink" title="表连接语法"></a>表连接语法</h5><ol><li>SQL92语法：(结构不清晰)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b</span><br><span class="line"><span class="keyword">from</span> table1,table2</span><br><span class="line"><span class="keyword">where</span> table1.no <span class="operator">=</span> table2.no</span><br></pre></td></tr></table></figure><ol start="2"><li>SQL99语法：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b</span><br><span class="line"><span class="keyword">from</span> table1 <span class="keyword">join</span> table2 <span class="keyword">on</span> table1.no <span class="operator">=</span> table2.no</span><br></pre></td></tr></table></figure><h5 id="左连接与右连接"><a href="#左连接与右连接" class="headerlink" title="左连接与右连接"></a>左连接与右连接</h5><ol><li><p>right join … on.. 或 left join … on … 中right &#x2F; left 表示将join关键字右 &#x2F; 左边的这张表看成主表，主要是为了将这张表的数据全部查询出来，顺便着关联查询左 &#x2F; 右边的表。</p></li><li><p>外连接的查询结果条数 &gt;&#x3D; 内连接的查询结果条数</p></li></ol><h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><ol><li>用于连接两次的查询结果，减少查询次数，将乘法变成了加法运算</li><li>结果集合合并时列和列的数据类型也要相同</li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ol><li><p>非空约束：not null</p></li><li><p>唯一性约束：unique</p></li><li><p>主键约束：primary key</p></li><li><p>外键约束：foreign key</p></li><li><p>检查约束：check（mysql不支持，oracle支持）</p><blockquote><p>子表中的外键引用的父表中的某个字段，被引用的这个字段必须是主键吗？不一定是主键，但至少具有unique约束</p></blockquote></li></ol><h3 id="字符串转日期类型"><a href="#字符串转日期类型" class="headerlink" title="字符串转日期类型"></a>字符串转日期类型</h3><ol><li>str_to_date(‘字符串日期’,’日期格式’)</li><li>mysql的日期格式：%Y年 %m月 %d日 %h时 %i分 %s秒</li><li>如果提供的日期字符串类型是(‘年-月-日’)格式，则不需要str_to_date函数进行转换</li></ol><h3 id="null值处理"><a href="#null值处理" class="headerlink" title="null值处理"></a>null值处理</h3><ol><li><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL &#x3D; NULL 返回 NULL 。</p><blockquote><p><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</p><p><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</p><p><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</p></blockquote></li><li><p>涉及null的计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> , columnName1<span class="operator">+</span>ifnull(columnName2,<span class="number">0</span>) <span class="keyword">from</span> tableName;</span><br></pre></td></tr></table></figure><p>columnName1，columnName2 为 int 型，当 columnName2 中，有值为 null 时，columnName1+columnName2&#x3D;null， ifnull(columnName2,0) 把 columnName2 中 null 值转为 0。</p></li><li><p>在MySQL和SQLServer中，null值默认最小，在Oracle中，null值默认最大</p></li></ol><h3 id="MySQL导入数据"><a href="#MySQL导入数据" class="headerlink" title="MySQL导入数据"></a>MySQL导入数据</h3><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><ol><li><p>使用mysql命令导入语法格式为</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u用户名    <span class="operator">-</span>p密码    <span class="operator">&lt;</span>  要导入的数据库数据</span><br></pre></td></tr></table></figure></blockquote></li><li><p>source 命令导入数据库需要先登录到数库终端</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source 文件名</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--Lambda表达式</title>
      <link href="/2022/04/18/Java%E5%AD%A6%E4%B9%A0-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/04/18/Java%E5%AD%A6%E4%B9%A0-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="函数式接口的定义"><a href="#函数式接口的定义" class="headerlink" title="函数式接口的定义"></a>函数式接口的定义</h3><ol><li>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</li><li>对于函数式接口，可以通过lambda表达式来创建该接口的对象。</li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Lambda 表达式的主要作用就是可以用于简化创建匿名内部类对象，Lambda 表达式的代码块将会用于实现抽象方法的方法体，Lambda 表达式就相当于一个匿名方法。</p><p>Lambda 表达式由三部分组成：</p><ul><li>形参列表：形参列表允许省略类型，如果形参列表中只有一个参数，形参列表的圆括号也可以省略；</li><li>箭头（<code>-&gt;</code>）：通过英文画线和大于符号组成；</li><li>代码块：如果代码块只有一条语句，花括号可以省略。Lambda 代码块只有一条 return 语句，可以省略 return 关键字，Lambda 表达式会自动返回这条语句的值作为返回值。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式与函数式接口"><a href="#Lambda表达式与函数式接口" class="headerlink" title="Lambda表达式与函数式接口"></a>Lambda表达式与函数式接口</h3><p>Lambda 表达式的类型，也被称为「目标类型（<code>target type</code>）」。<strong>Lambda 表达式的目标类型必须是「函数式接口（<code>functional interface</code>）」</strong>。函数式接口代表只包含一个抽象方法的接口。函数式接口可以包含多个默认方法、类方法，但仅能声明一个抽象方法。</p><blockquote><p>查询 Java 8 的 API 文档，可以发现大量的函数式接口，例如：Runnable、ActionListener 等接口都是函数式接口。</p></blockquote><p>由于 Lambda 表达式的结果就是被当做对象&#x2F;实例，因此，可以使用 Lambda 表达式进行赋值，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看一下 Runnable 接口的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一个错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面这段代码会报错：<code>Target type of a lambda conversion must be an interface</code>。Lambda 表达式的目标类型必须是明确的函数式接口！将 Lambda 表达式赋值给 Object 类型的变量，编译器只能推断出它的表达类型为 Object，而 Object 并不是函数式接口，因此就报错了！</p><p>为了保证 Lambda 表达式的目标类型是明确的函数式接口，有如下三种常见方式：</p><ul><li>将 Lambda 表达式赋值给函数式接口类型的变量；</li><li>将 Lambda 表达式作为函数式接口类型的参数传给某个方法；</li><li>使用函数式接口对 Lambda 表达式进行强制类型转换；</li></ul><p>将上面出错的代码可以进行如下的改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> (Runnable)() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式与匿名内部类的联系和区别"><a href="#Lambda表达式与匿名内部类的联系和区别" class="headerlink" title="Lambda表达式与匿名内部类的联系和区别"></a>Lambda表达式与匿名内部类的联系和区别</h3><p>Lambda 表达式与匿名内部类存在如下相同点：</p><ul><li>Lambda 表达式与匿名内部类一样，都可以直接访问 <code>effectively final</code> 的局部变量，以及外部类的成员变量（包括示例变量和类变量）；</li><li>Lambda 表达式创建的对象与匿名内部类生成的对象一样，都可以直接调用从接口中继承的默认方法；</li></ul><p>Lambda 表达式与匿名内部类的区别：</p><ul><li>匿名内部类可以为任意接口创建实例，不管接口包含多少个抽象方法，只要匿名内部类实现所有抽象方法即可；但是 Lambda 表达式只能为函数式接口创建实例；</li><li>匿名内部类可以为抽象类甚至普通类创建实例，但是 Lambda 表达式只能为函数式接口创建实例；</li><li>匿名内部类实现的抽象方法体允许调用接口中定义的默认方法，但是 Lambda 表达式的代码块不允许调用接口中定义的默认方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lambdaTest01</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Idfs1</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Dfs</span> <span class="variable">idfs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Idfs0</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Idfs1</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Idfs2</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Idfs2</span>();</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">idfs = <span class="keyword">new</span> <span class="title class_">Dfs</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用lambda简化</span></span><br><span class="line">idfs = () -&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;lambda--4&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">idfs.dfs();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">System.out.println(<span class="string">&quot;lambda--&quot;</span>+i);</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dfs</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Idfs0</span> <span class="keyword">implements</span> <span class="title class_">Dfs</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;lambda--0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--线程</title>
      <link href="/2022/04/17/Java%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/04/17/Java%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li>Process 进程；Thread线程</li></ol><p>一个进程包括由操作系统分配的内存空间，包含一个或多个线程。</p><p>一个线程不能独立的存在，它必须是进程的一部分。</p><p>一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><ol><li>Thread.currentThread().getName() 获取当前线程的名称</li></ol><h4 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h4><ol><li>将一个类声明为Thread的子类；重写run方法</li></ol><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li>不建议使用：避免OOP单继承局限性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承Thread类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//重写run方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="type">day01</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">day01</span>();</span><br><span class="line"><span class="comment">//调用start方法</span></span><br><span class="line">d.start();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)</span><br><span class="line">System.out.println(<span class="string">&quot;main方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现Runnable接口；实现run()方法</li></ol><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTest2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ProcessTest2</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessTest2</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;run()方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>真实对象和代理对象都要实现同一个接口代理对象要代理真实对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StactProxy</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">WeddingCompany</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(<span class="keyword">new</span> <span class="title class_">You</span>());</span><br><span class="line">w.happyMarry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;结婚&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Marry target;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry marry)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target = marry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target.happyMarry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：代理对象可以做很多真实对象做不了的事；真实对象专注作自己的事情</p><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>创建(new Thread())，就绪，阻塞，运行，死亡</p><p>当调用start() 方法，线程立即进入就绪状态，但不意味着立即调度执行</p><h4 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h4><ol><li>setPriority(int newPriority) 更改线程的优先级</li><li>static void sleep(long millis) 在指定的毫秒数内让当前正在执行的线程休眠</li><li>void jion() 等待该线程终止</li><li>static void yield() 暂停当前正在执行的线程对象，并执行其他线程</li></ol><h4 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试stop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 86136</span></span><br><span class="line"><span class="comment"> * 1. 建议线程正常停止---&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment"> * 2. 建议使用标志位----&gt;设置一个标志位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StopTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">StopTest</span> <span class="variable">stopTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopTest</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(stopTest).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;主线程----&quot;</span>+i);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">200</span>) &#123;</span><br><span class="line">stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;run---&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><ol><li>sleep(时间) 指定当前线程阻塞的毫秒数</li><li>sleep 存在异常 InterruptedException</li><li>sleep 时间达到后线程进入就绪状态</li><li>每一个对象都有一个锁，sleep 不会释放锁</li></ol><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><ol><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>礼让不一定成功</li></ol><blockquote><p>Thread.yield();</p></blockquote><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>用数字表示，范围从1~10</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><ol><li>关键字：synchronized</li><li>当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可</li><li>存在的问题：</li></ol><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题</li></ul><p><em>同步方法</em></p><blockquote><p>public synchronized void method(int args) {}</p></blockquote><p>synchronized 方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized 方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p><p><em>同步块</em></p><blockquote><p>synchronized(Obj) {}</p></blockquote><ul><li>Obj 称为同步监视器，可以是任何对象，但推荐使用共享资源作为同步监视器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个人取款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">100</span>,<span class="string">&quot;工作&quot;</span>);</span><br><span class="line"><span class="type">Drawing</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account,<span class="number">50</span>,<span class="string">&quot;ni&quot;</span>);</span><br><span class="line"><span class="type">Drawing</span> <span class="variable">I</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account,<span class="number">100</span>,<span class="string">&quot;me&quot;</span>);</span><br><span class="line">you.start();</span><br><span class="line">I.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> money, String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">Account account;<span class="comment">//账户</span></span><br><span class="line"><span class="type">int</span> nowMoney;</span><br><span class="line"><span class="type">int</span> drawingMoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Drawing</span><span class="params">(Account account, <span class="type">int</span> drawingMoney, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.account = account;</span><br><span class="line"><span class="built_in">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(account) &#123;</span><br><span class="line"><span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">account.money = account.money - drawingMoney;</span><br><span class="line">nowMoney = nowMoney + drawingMoney;</span><br><span class="line">System.out.println(account.name+<span class="string">&quot;余额&quot;</span>+account.money);</span><br><span class="line">System.out.println(<span class="built_in">this</span>.getName()+<span class="string">&quot;手里的钱&quot;</span>+nowMoney);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h4><blockquote><p>wait()</p></blockquote><p>生产者消费者模型</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ol><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。</li><li>好处：</li></ol><ul><li>提高响应速度</li><li>降低资源消耗</li><li>便于线程管理</li></ul><blockquote><p>corePoolSize:核心池的大小</p><p>maximumPoolSize:最大线程数</p><p>keepAliveTime:线程没有任务时最多保持多长时间后会终止</p></blockquote><ol><li>JDK 5.0 起提供了线程池相关API：ExecutorService(接口) 和 Executors(工具类、线程池的工厂类)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行任务/命令，没有返回值，一般用来执行Runnable</span></span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接池</span></span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//pool-1-thread-3</span></span><br><span class="line"><span class="comment">//pool-1-thread-1</span></span><br><span class="line"><span class="comment">//pool-1-thread-4</span></span><br><span class="line"><span class="comment">//pool-1-thread-2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习--泛型</title>
      <link href="/2022/04/16/Java%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2022/04/16/Java%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="本质：参数化类型-所操作的数据类型被指定为一个参数"><a href="#本质：参数化类型-所操作的数据类型被指定为一个参数" class="headerlink" title="本质：参数化类型(所操作的数据类型被指定为一个参数)"></a>本质：参数化类型(所操作的数据类型被指定为一个参数)</h3><h3 id="为什么引入泛型"><a href="#为什么引入泛型" class="headerlink" title="为什么引入泛型"></a>为什么引入泛型</h3><ol><li>对于容器类型，如数组、ArrayList、HashMap等，使用数组时需要指定所装的对象类型，如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br></pre></td></tr></table></figure><ol><li>对于集合类型容器，如ArrayList、HashMap、TreeSet等，它们不但是容器，还提供了一些方法对容器内对象的操作方法，如get，set，sort。这个时候就需要知道容器内放的是什么类型的对象，才能return或set。正因为程序开发人员可能把任何类型的对象放进集合容器，所以这些容器在设计的时候只设计成Object类型对象，因为Object是根类；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListContainer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这样的话，根据多态，容器就能装任何类型的对象了。不过，取出对象时则需求进行强制类型转换，转换成实际的类型。但这样会有很多类型不安全问题，为什么呢？因为编译器没法帮忙做类型检查，导致代码在运行时易于出现ClassCastException异常。</li><li>利用泛型，重新设计，参数化类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListContainer</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getObj</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(T obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>这里的<T>的 T 的类型的参数，具体 T 指代什么类型，在调用时再指定，如</p><p>ListContainer<String> myCon &#x3D; new ListContainer&lt;&gt;();</p></li></ol><h3 id="泛型标记符"><a href="#泛型标记符" class="headerlink" title="泛型标记符"></a>泛型标记符</h3><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong>- 表示不确定的 java 类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> java成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/04/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/04/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p> 愿你精疲力尽时有树倚</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
